{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_string-ws.js","webpack:///./node_modules/path-browserify/index.js","webpack:///./node_modules/core-js/modules/_enum-bug-keys.js","webpack:///./node_modules/core-js/modules/_object-keys.js","webpack:///./node_modules/core-js/modules/_object-gopd.js","webpack:///./node_modules/core-js/modules/_object-dps.js","webpack:///./src/views/audio.vue?c0e8","webpack:///./node_modules/core-js/modules/_object-create.js","webpack:///./node_modules/node-libs-browser/mock/process.js","webpack:///./node_modules/core-js/modules/_object-pie.js","webpack:///./src/views/audio.vue?b828","webpack:///src/views/audio.vue","webpack:///./src/views/audio.vue?ab33","webpack:///./src/views/audio.vue","webpack:///./node_modules/core-js/modules/_inherit-if-required.js","webpack:///./node_modules/core-js/modules/_shared-key.js","webpack:///./node_modules/core-js/modules/_iobject.js","webpack:///./node_modules/core-js/modules/_to-iobject.js","webpack:///./node_modules/core-js/modules/_to-absolute-index.js","webpack:///./node_modules/core-js/modules/_set-proto.js","webpack:///./node_modules/core-js/modules/_object-gopn.js","webpack:///./node_modules/recordrtc/RecordRTC.js","webpack:///./node_modules/core-js/modules/_string-trim.js","webpack:///./node_modules/core-js/modules/_defined.js","webpack:///./node_modules/core-js/modules/_array-includes.js","webpack:///./node_modules/core-js/modules/es6.number.constructor.js","webpack:///./node_modules/core-js/modules/_object-keys-internal.js"],"names":["module","exports","process","normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","filter","xs","f","res","push","resolve","resolvedPath","resolvedAbsolute","arguments","path","cwd","TypeError","charAt","split","p","join","normalize","isAbsolute","trailingSlash","substr","paths","Array","prototype","call","index","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","result","root","dir","basename","ext","extname","str","len","$keys","__webpack_require__","enumBugKeys","Object","keys","O","pIE","createDesc","toIObject","toPrimitive","has","IE8_DOM_DEFINE","gOPD","getOwnPropertyDescriptor","P","e","dP","anObject","getKeys","defineProperties","Properties","_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_audio_vue_vue_type_style_index_0_id_4fa41b93_scoped_true_lang_css__WEBPACK_IMPORTED_MODULE_0___default","dPs","IE_PROTO","Empty","PROTOTYPE","createDict","iframeDocument","iframe","lt","gt","style","display","appendChild","src","contentWindow","document","open","write","close","F","create","undefined","nextTick","fn","setTimeout","platform","arch","execPath","title","pid","browser","env","argv","binding","name","Error","chdir","exit","kill","umask","dlopen","uptime","memoryUsage","uvCounters","features","propertyIsEnumerable","audio","mp3SizeContent","render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","attrs","mode","recording","key","on","click","stopRecord","startRecord","id","staticRenderFns","audiovue_type_script_lang_js","data","created","methods","record","media","navigator","mediaDevices","getUserMedia","then","startUserMedia","bind","catch","onUserMediaError","stream","RecordRTC","RecordRTC_default","type","_this","startRecording","_this2","stopRecording","console","log","blob","getBlob","voiceData","getElementById","removeChild","Blob","createElement","URL","createObjectURL","controls","innerHTML","Number","size","toFixed","views_audiovue_type_script_lang_js","component","componentNormalizer","__webpack_exports__","isObject","setPrototypeOf","set","that","target","C","S","constructor","shared","uid","cof","it","IObject","defined","toInteger","max","check","proto","test","buggy","Function","__proto__","hiddenKeys","getOwnPropertyNames","mediaStream","config","RecordRTCConfiguration","self","config2","disableLogs","mediaRecorder","clearRecordedData","setState","recordingDuration","handleRecordingDuration","initRecorder","initCallback","Recorder","GetRecorderType","callback","state","resumeRecording","warn","stop","_callback","warningLog","__blob","forEach","bytesToSize","url","autoWriteToDisk","getDataURL","dataURL","parameter","DiskStorage","Store","pauseRecording","pause","resume","readFile","_blob","postMessage","FileReaderSync","readAsDataURL","_mediaRecorder","Worker","mozGetUserMedia","reader","FileReader","onload","event","webWorker","processInWebWorker","onmessage","_function","toString","worker","revokeObjectURL","counter","onRecordingStopped","onStateChanged","WARNING","returnObject","setRecordingDuration","toURL","getInternalRecorder","save","fileName","invokeSaveAsDialog","getFromDisk","setAdvertisementArray","arrayOfWebPImages","advertisement","duration","image","bufferSize","sampleRate","buffer","reset","getState","destroy","Storage","AudioContextConstructor","version","prop","recorderType","video","WhammyRecorder","CanvasRecorder","GifRecorder","StereoAudioRecorder","MediaStreamRecorder","getAudioTracks","getVideoTracks","MediaRecorder","mimeType","bitsPerSecond","recorder","isChrome","isEdge","isOpera","isMediaRecorderCompatible","isTypeSupported","MultiStreamRecorder","MRecordRTC","addStream","_mediaStream","mediaType","gif","audioRecorder","numberOfAudioChannels","timeSlice","onTimeStamp","newStream","videoTrack","MediaStream","addTrack","videoRecorder","canvas","frameInterval","gifRecorder","frameRate","quality","blobURL","output","callback00","webkitURL","_audioDataURL","_videoDataURL","writeToDisk","args","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","apply","Fetch","_type","replace","options","audioDataURL","videoDataURL","gifDataURL","audioBlob","videoBlob","gifBlob","browserFakeUserAgent","window","global","userAgent","error","captureStream","mozCaptureStream","obj","getContext","play","drawImage","toDataURL","HTMLVideoElement","location","protocol","href","hash","screen","width","height","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","lastTime","element","currTime","Date","getTime","timeToCall","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","AudioContext","webkitAudioContext","mozAudioContext","webkitGetUserMedia","indexOf","msSaveBlob","msSaveOrOpenBlob","opera","isSafari","toLowerCase","isElectron","bytes","k","sizes","parseInt","floor","pow","toPrecision","file","fileExtension","splitted","fileFullName","round","random","hyperlink","download","body","documentElement","dispatchEvent","MouseEvent","view","bubbles","cancelable","versions","electron","setSrcObject","ignoreCreateObjectURL","srcObject","mozSrcObject","alert","webkitMediaStream","getTracks","tracks","track","kind","chrome","isFirefox","InstallTrigger","appVersion","verOffset","ix","nAgt","fullVersion","parseFloat","majorVersion","substring","isNaN","arrayOfBlobs","updateTimeStamp","timestamps","getMimeType","secondObject","clearRecordedDataCB","isMediaStreamActive","active","ended","getArrayOfBlobs","allStates","recorderHints","canRecordMimeType","ignoreMutedMedia","ondataavailable","recordingCallback","getNativeBlob","onstart","onpause","onresume","onstop","onerror","looper","manuallyStopped","timeslice","getAllStates","checkForInactiveTracks","jsAudioNode","leftchannel","rightchannel","recordingLength","desiredSampRate","mergeLeftRightBuffers","mergeAudioBuffers","cb","interleaved","leftBuffers","rightBuffers","internalInterleavedLength","interpolateArray","newSampleRate","oldSampleRate","fitCount","newData","springFactor","tmp","before","after","ceil","atPoint","linearInterpolate","mergeBuffers","channelBuffer","rLength","Float64Array","offset","lng","interleave","leftChannel","rightChannel","inputIndex","writeUTFBytes","string","setUint8","charCodeAt","interleavedLength","resultingBufferLength","ArrayBuffer","DataView","setUint32","setUint16","volume","setInt16","noWorker","workerURL","resetVariables","isAudioProcessStarted","isPaused","byteLength","context","audioInput","createMediaStreamSource","legalBufferValues","JSON","stringify","createJavaScriptNode","createScriptProcessor","connect","intervalsBasedBuffers","left","right","onaudioprocess","disconnect","onAudioProcessDataAvailable","onAudioProcessStarted","inputBuffer","getChannelData","chLeft","Float32Array","chRight","destination","htmlElement","html2canvas","isCanvasSupportsStreamCapturing","item","globalCanvas","mediaStreamRecorder","isRecording","_isChrome","webkitRTCPeerConnection","chromeVersion","matchArray","match","HTMLCanvasElement","CanvasRenderingContext2D","useWhammyRecorder","canvasMediaStream","webkitCaptureStream","mdStream","whammy","frames","drawCanvasFrame","getWebPImages","nodeName","framesLength","frame","idx","framesRemaining","onEncodingCallback","webp","compile","isPausedRecording","cloneCanvas","newCanvas","grabMouse","showMousePointer","onrendered","Whammy","Video","drawFrames","paused","isStopDrawing","asyncLoop","o","loop","functionToLoop","dropBlackFrames","_frames","_framesToCheck","_pixTolerance","_frameTolerance","localCanvas","context2d","resultFrames","checkUntilNotBlack","endCheckFrame","sampleColor","r","g","b","maxColorDifference","sqrt","pixTolerance","frameTolerance","doNotCheckNext","matchPixCount","endPixCheck","maxPixCount","finishImage","Image","imageData","getImageData","pix","currentColor","colorDifference","cloneNode","onloadedmetadata","muted","WhammyVideo","whammyInWebWorker","ArrayToWebM","info","checkFrames","clusterMaxDuration","EBML","doubleToString","frameNumber","clusterTimecode","clusterFrames","clusterDuration","clusterCounter","cluster","getClusterData","generateEBML","map","block","makeSimpleBlock","discardable","invisible","keyframe","lacing","trackNum","timecode","numToBuffer","num","Uint8Array","reverse","strToBuffer","bitsToBuffer","bits","pad","json","ebml","zeroes","sizeToString","padded","flags","out","String","fromCharCode","parseWebP","riff","VP8","RIFF","WEBP","frameStart","c","getStrLength","unpadded","parseRIFF","chunks","webm","atob","add","init","indexedDB","db","dbVersion","dbName","request","onError","onsuccess","setVersion","createObjectStore","putInDB","onupgradeneeded","dataBase","dataStoreName","transaction","getFromStore","portionName","objectStore","get","put","GIFEncoder","script","isHTMLObject","drawVideoFrame","time","clearedRecordedData","lastAnimationFrame","lastFrameTime","onGifPreview","gifEncoder","addFrame","isLoadedMetaData","offsetWidth","offsetHeight","setRepeat","setDelay","setQuality","onGifRecordingStarted","now","bin","autoplay","MultiStreamsMixer","arrayOfMediaStreams","videos","isStopDrawingFrames","useGainNode","drawVideosToCanvas","videosLength","fullcanvas","remaining","x","y","top","onRender","getMixedStream","mixedVideoStream","getMixedVideoStream","mixedAudioStream","getMixedAudioStream","capturedStream","resetVideoStreams","videoStream","audioContext","audioSources","gainNode","createGain","gain","value","audioTracksLength","audioSource","audioDestination","createMediaStreamDestination","getVideo","streams","startDrawingFrames","appendStreams","releaseStreams","source","clearRect","mixer","previewStream","addStreams","RecordRTCPromisesHandler","recordRTC","Promise","reject","$export","fails","spaces","space","non","ltrim","RegExp","rtrim","exporter","KEY","ALIAS","exp","FORCE","TYPE","toLength","toAbsoluteIndex","IS_INCLUDES","$this","el","fromIndex","inheritIfRequired","gOPN","$trim","NUMBER","$Number","Base","BROKEN_COF","TRIM","toNumber","argument","third","radix","maxCode","first","NaN","code","digits","l","valueOf","j","arrayIndexOf","object","names"],"mappings":"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","file":"js/0.0c783dca.js","sourcesContent":["module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./audio.vue?vue&type=style&index=0&id=4fa41b93&scoped=true&lang=css\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./audio.vue?vue&type=style&index=0&id=4fa41b93&scoped=true&lang=css\"","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n","exports.f = {}.propertyIsEnumerable;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"about\"},[_c('h1',[_vm._v(\"测试录音\")]),_c('div',{staticClass:\"record-c\"},[_c('transition',{attrs:{\"name\":\"fade\",\"mode\":\"out-in\"}},[(!_vm.recording)?_c('button',{key:\"start\",staticClass:\"btn\",on:{\"click\":_vm.startRecord}},[_vm._v(\"开始录音\")]):_c('button',{key:\"stop\",staticClass:\"btn mgl\",on:{\"click\":_vm.stopRecord}},[_vm._v(\"结束录音\")])])],1),_c('div',{staticClass:\"audio\",attrs:{\"id\":\"audio\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"about\">\n    <h1>测试录音</h1>\n    <div class=\"record-c\">\n      <transition name=\"fade\" mode=\"out-in\">\n        <button class=\"btn\" @click=\"startRecord\" v-if=\"!recording\" key=\"start\">开始录音</button>\n        <button class=\"btn mgl\" @click=\"stopRecord\" v-else key=\"stop\" >结束录音</button>\n      </transition>\n    </div>\n    <div id=\"audio\" class=\"audio\">\n    </div>\n  </div>\n</template>\n\n<script>\nimport RecordRTC from 'recordrtc'\nlet audio\nlet mp3SizeContent\nexport default {\n  data () {\n    return {\n      recording: false\n    }\n  },\n  created () {\n\n  },\n  methods: {\n    record () {\n      const media = navigator.mediaDevices.getUserMedia({ audio: true })\n      media.then(this.startUserMedia.bind(this)).catch(this.onUserMediaError.bind(this))\n      return media\n    },\n    startUserMedia (stream) {\n      this.RecordRTC = RecordRTC(stream, { type: 'audio' })\n      return stream\n    },\n    onUserMediaError () {},\n    startRecord () {\n      this.recording = true\n      this.record().then(() => {\n        this.RecordRTC.startRecording()\n      })\n    },\n    stopRecord () {\n      this.recording = false\n      this.RecordRTC.stopRecording((data) => {\n        console.log(data)\n        const blob = this.RecordRTC.getBlob()\n        this.voiceData(blob)\n      })\n    },\n    voiceData (data) {\n      if (audio) {\n        document.getElementById('audio').removeChild(audio)\n      }\n      if (mp3SizeContent) {\n        document.getElementById('audio').removeChild(mp3SizeContent)\n      }\n      const blob = new Blob([data], { type: 'audio/mp3' })\n      console.log(blob)\n      audio = document.createElement('audio')\n      audio.src = URL.createObjectURL(blob)\n      audio.controls = true\n      mp3SizeContent = document.createElement('div')\n      mp3SizeContent.innerHTML = `mp3大小: ${(Number(blob.size) / 1000).toFixed(2)}kb`\n      document.getElementById('audio').appendChild(audio)\n      document.getElementById('audio').appendChild(mp3SizeContent)\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .about {\n    padding: 20px;\n    position: relative;\n  }\n  .record-c {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    left: 0;\n    right: 0;\n  }\n  .btn {\n    border: 0;\n    outline: 0;\n    padding: 20px 20px;\n    color: #fff;\n    border-radius: 15px;\n    background: rgb(112, 79, 79);\n  }\n  .mgl {\n    /* margin-left: 20px; */\n  }\n  .fade-enter-active, .fade-leave-active {\n    transition: opacity .5s, transform .5s;\n  }\n  .fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\n    opacity: 0;\n  }\n  .fade-enter {\n    transform: translateX(30px);\n  }\n  .fade-leave-active {\n    transform: translateX(-30px);\n  }\n\n  .audio {\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    left: 0;\n    right: 0;\n    top: 200px;\n  }\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./audio.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./audio.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./audio.vue?vue&type=template&id=4fa41b93&scoped=true\"\nimport script from \"./audio.vue?vue&type=script&lang=js\"\nexport * from \"./audio.vue?vue&type=script&lang=js\"\nimport style0 from \"./audio.vue?vue&type=style&index=0&id=4fa41b93&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4fa41b93\",\n  null\n  \n)\n\nexport default component.exports","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","'use strict';\r\n\r\n// Last time updated: 2017-12-13 5:07:29 AM UTC\r\n\r\n// ________________\r\n// RecordRTC v5.4.6\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\n// ____________\r\n// RecordRTC.js\r\n\r\n/**\r\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \r\n * @summary Record audio, video or screen inside the browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTC\r\n * @class\r\n * @example\r\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\r\n *     type: 'video', // audio or video or gif or canvas\r\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\r\n * });\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction RecordRTC(mediaStream, config) {\r\n    if (!mediaStream) {\r\n        throw 'First parameter is required.';\r\n    }\r\n\r\n    config = config || {\r\n        type: 'video'\r\n    };\r\n\r\n    config = new RecordRTCConfiguration(mediaStream, config);\r\n\r\n    // a reference to user's recordRTC object\r\n    var self = this;\r\n\r\n    function startRecording(config2) {\r\n        if (!!config2) {\r\n            // allow users to set options using startRecording method\r\n            // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\r\n            config = new RecordRTCConfiguration(mediaStream, config2);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('started recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder.record();\r\n\r\n            setState('recording');\r\n\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n            return self;\r\n        }\r\n\r\n        initRecorder(function() {\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    function initRecorder(initCallback) {\r\n        if (initCallback) {\r\n            config.initCallback = function() {\r\n                initCallback();\r\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\r\n            };\r\n        }\r\n\r\n        var Recorder = new GetRecorderType(mediaStream, config);\r\n\r\n        mediaRecorder = new Recorder(mediaStream, config);\r\n        mediaRecorder.record();\r\n\r\n        setState('recording');\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\r\n        }\r\n    }\r\n\r\n    function stopRecording(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'paused') {\r\n            self.resumeRecording();\r\n\r\n            setTimeout(function() {\r\n                stopRecording(callback);\r\n            }, 1);\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording' && !config.disableLogs) {\r\n            console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Stopped recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (config.type !== 'gif') {\r\n            mediaRecorder.stop(_callback);\r\n        } else {\r\n            mediaRecorder.stop();\r\n            _callback();\r\n        }\r\n\r\n        setState('stopped');\r\n\r\n        function _callback(__blob) {\r\n            if (!mediaRecorder) {\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, '');\r\n                } else {\r\n                    callback('');\r\n                }\r\n                return;\r\n            }\r\n\r\n            Object.keys(mediaRecorder).forEach(function(key) {\r\n                if (typeof mediaRecorder[key] === 'function') {\r\n                    return;\r\n                }\r\n\r\n                self[key] = mediaRecorder[key];\r\n            });\r\n\r\n            var blob = mediaRecorder.blob;\r\n\r\n            if (!blob) {\r\n                if (__blob) {\r\n                    mediaRecorder.blob = blob = __blob;\r\n                } else {\r\n                    throw 'Recording failed.';\r\n                }\r\n            }\r\n\r\n            if (blob && !config.disableLogs) {\r\n                console.log(blob.type, '->', bytesToSize(blob.size));\r\n            }\r\n\r\n            if (callback) {\r\n                var url = URL.createObjectURL(blob);\r\n\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, url);\r\n                } else {\r\n                    callback(url);\r\n                }\r\n            }\r\n\r\n            if (!config.autoWriteToDisk) {\r\n                return;\r\n            }\r\n\r\n            getDataURL(function(dataURL) {\r\n                var parameter = {};\r\n                parameter[config.type + 'Blob'] = dataURL;\r\n                DiskStorage.Store(parameter);\r\n            });\r\n        }\r\n    }\r\n\r\n    function pauseRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('paused');\r\n\r\n        mediaRecorder.pause();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Paused recording.');\r\n        }\r\n    }\r\n\r\n    function resumeRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'paused') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('recording');\r\n\r\n        // not all libs have this method yet\r\n        mediaRecorder.resume();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Resumed recording.');\r\n        }\r\n    }\r\n\r\n    function readFile(_blob) {\r\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n    }\r\n\r\n    function getDataURL(callback, _mediaRecorder) {\r\n        if (!callback) {\r\n            throw 'Pass a callback function over getDataURL.';\r\n        }\r\n\r\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\r\n\r\n        if (!blob) {\r\n            if (!config.disableLogs) {\r\n                console.warn('Blob encoder did not finish its job yet.');\r\n            }\r\n\r\n            setTimeout(function() {\r\n                getDataURL(callback, _mediaRecorder);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\r\n            var webWorker = processInWebWorker(readFile);\r\n\r\n            webWorker.onmessage = function(event) {\r\n                callback(event.data);\r\n            };\r\n\r\n            webWorker.postMessage(blob);\r\n        } else {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(blob);\r\n            reader.onload = function(event) {\r\n                callback(event.target.result);\r\n            };\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                'this.onmessage =  function (e) {' + _function.name + '(e.data);}'\r\n            ], {\r\n                type: 'application/javascript'\r\n            }));\r\n\r\n            var worker = new Worker(blob);\r\n            URL.revokeObjectURL(blob);\r\n            return worker;\r\n        }\r\n    }\r\n\r\n    function handleRecordingDuration(counter) {\r\n        counter = counter || 0;\r\n\r\n        if (self.state === 'paused') {\r\n            setTimeout(function() {\r\n                handleRecordingDuration(counter);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'stopped') {\r\n            return;\r\n        }\r\n\r\n        if (counter >= self.recordingDuration) {\r\n            stopRecording(self.onRecordingStopped);\r\n            return;\r\n        }\r\n\r\n        counter += 1000; // 1-second\r\n\r\n        setTimeout(function() {\r\n            handleRecordingDuration(counter);\r\n        }, 1000);\r\n    }\r\n\r\n    function setState(state) {\r\n        if (!self) {\r\n            return;\r\n        }\r\n\r\n        self.state = state;\r\n\r\n        if (typeof self.onStateChanged.call === 'function') {\r\n            self.onStateChanged.call(self, state);\r\n        } else {\r\n            self.onStateChanged(state);\r\n        }\r\n    }\r\n\r\n    var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\r\n\r\n    function warningLog() {\r\n        if (config.disableLogs === true) {\r\n            return;\r\n        }\r\n\r\n        console.warn(WARNING);\r\n    }\r\n\r\n    var mediaRecorder;\r\n\r\n    var returnObject = {\r\n        /**\r\n         * This method starts the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var recorder = RecordRTC(mediaStream, {\r\n         *     type: 'video'\r\n         * });\r\n         * recorder.startRecording();\r\n         */\r\n        startRecording: startRecording,\r\n\r\n        /**\r\n         * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     // use either \"this\" or \"recorder\" object; both are identical\r\n         *     video.src = this.toURL();\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        stopRecording: stopRecording,\r\n\r\n        /**\r\n         * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Firefox is unable to pause the recording. Fix it.\r\n         * @example\r\n         * recorder.pauseRecording();  // pause the recording\r\n         * recorder.resumeRecording(); // resume again\r\n         */\r\n        pauseRecording: pauseRecording,\r\n\r\n        /**\r\n         * This method resumes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.pauseRecording();  // first of all, pause the recording\r\n         * recorder.resumeRecording(); // now resume it\r\n         */\r\n        resumeRecording: resumeRecording,\r\n\r\n        /**\r\n         * This method initializes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * recorder.initRecorder();\r\n         */\r\n        initRecorder: initRecorder,\r\n\r\n        /**\r\n         * Ask RecordRTC to auto-stop the recording after 5 minutes.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var fiveMinutes = 5 * 1000 * 60;\r\n         * recorder.setRecordingDuration(fiveMinutes, function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         * \r\n         * // or otherwise\r\n         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         */\r\n        setRecordingDuration: function(recordingDuration, callback) {\r\n            if (typeof recordingDuration === 'undefined') {\r\n                throw 'recordingDuration is required.';\r\n            }\r\n\r\n            if (typeof recordingDuration !== 'number') {\r\n                throw 'recordingDuration must be a number.';\r\n            }\r\n\r\n            self.recordingDuration = recordingDuration;\r\n            self.onRecordingStopped = callback || function() {};\r\n\r\n            return {\r\n                onRecordingStopped: function(callback) {\r\n                    self.onRecordingStopped = callback;\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * This method can be used to clear/reset all the recorded data.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\r\n         * @example\r\n         * recorder.clearRecordedData();\r\n         */\r\n        clearRecordedData: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            mediaRecorder.clearRecordedData();\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('Cleared old recorded data.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.getBlob();\r\n         *\r\n         *     var file = new File([blob], 'filename.webm', {\r\n         *         type: 'video/webm'\r\n         *     });\r\n         *\r\n         *     var formData = new FormData();\r\n         *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\r\n         *     uploadToServer(formData);\r\n         * });\r\n         * @returns {Blob} Returns recorded data as \"Blob\" object.\r\n         */\r\n        getBlob: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return mediaRecorder.blob;\r\n        },\r\n\r\n        /**\r\n         * Get data-URI instead of Blob.\r\n         * @param {function} callback - Callback to get the Data-URI.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     recorder.getDataURL(function(dataURI) {\r\n         *         video.src = dataURI;\r\n         *     });\r\n         * });\r\n         */\r\n        getDataURL: getDataURL,\r\n\r\n        /**\r\n         * Get virtual/temporary URL. Usage of this URL is limited to current tab.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     video.src = this.toURL();\r\n         * });\r\n         * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\r\n         */\r\n        toURL: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return URL.createObjectURL(mediaRecorder.blob);\r\n        },\r\n\r\n        /**\r\n         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var internal = recorder.getInternalRecorder();\r\n         * if(internal instanceof MultiStreamRecorder) {\r\n         *     internal.addStreams([newAudioStream]);\r\n         *     internal.resetVideoStreams([screenStream]);\r\n         * }\r\n         * @returns {Object} Returns internal recording object.\r\n         */\r\n        getInternalRecorder: function() {\r\n            return mediaRecorder;\r\n        },\r\n\r\n        /**\r\n         * Invoke save-as dialog to save the recorded blob into your disk.\r\n         * @param {string} fileName - Set your own file name.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     this.save('file-name');\r\n         *\r\n         *     // or manually:\r\n         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\r\n         * });\r\n         */\r\n        save: function(fileName) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\r\n        },\r\n\r\n        /**\r\n         * This method gets a blob from indexed-DB storage.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.getFromDisk(function(dataURL) {\r\n         *     video.src = dataURL;\r\n         * });\r\n         */\r\n        getFromDisk: function(callback) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            RecordRTC.getFromDisk(config.type, callback);\r\n        },\r\n\r\n        /**\r\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\r\n         * @type {Array.<Array>}\r\n         * @param {Array} arrayOfWebPImages - Array of webp images.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * var arrayOfWebPImages = [];\r\n         * arrayOfWebPImages.push({\r\n         *     duration: index,\r\n         *     image: 'data:image/webp;base64,...'\r\n         * });\r\n         * recorder.setAdvertisementArray(arrayOfWebPImages);\r\n         */\r\n        setAdvertisementArray: function(arrayOfWebPImages) {\r\n            config.advertisement = [];\r\n\r\n            var length = arrayOfWebPImages.length;\r\n            for (var i = 0; i < length; i++) {\r\n                config.advertisement.push({\r\n                    duration: i,\r\n                    image: arrayOfWebPImages[i]\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\r\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.blob;\r\n         *\r\n         *     // below one is recommended\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        blob: null,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} bufferSize - Buffer-size used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used this buffer-size: ' + this.bufferSize);\r\n         * });\r\n         */\r\n        bufferSize: 0,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} sampleRate - Sample-rates used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used these sample-rates: ' + this.sampleRate);\r\n         * });\r\n         */\r\n        sampleRate: 0,\r\n\r\n        /**\r\n         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\r\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var arrayBuffer = this.buffer;\r\n         *     alert(arrayBuffer.byteLength);\r\n         * });\r\n         */\r\n        buffer: null,\r\n\r\n        /**\r\n         * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.reset();\r\n         * recorder.startRecording();\r\n         */\r\n        reset: function() {\r\n            if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\r\n                mediaRecorder.clearRecordedData();\r\n            }\r\n            mediaRecorder = null;\r\n            setState('inactive');\r\n            self.blob = null;\r\n        },\r\n\r\n        /**\r\n         * This method is called whenever recorder's state changes. Use this as an \"event\".\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.onStateChanged = function(state) {\r\n         *     console.log('Recorder state: ', state);\r\n         * };\r\n         */\r\n        onStateChanged: function(state) {\r\n            if (!config.disableLogs) {\r\n                console.log('Recorder state changed:', state);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * A recorder can have inactive, recording, paused or stopped states.\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * // this looper function will keep you updated about the recorder's states.\r\n         * (function looper() {\r\n         *     document.querySelector('h1').innerHTML = 'Recorder's state is: ' + recorder.state;\r\n         *     if(recorder.state === 'stopped') return; // ignore+stop\r\n         *     setTimeout(looper, 1000); // update after every 3-seconds\r\n         * })();\r\n         * recorder.startRecording();\r\n         */\r\n        state: 'inactive',\r\n\r\n        /**\r\n         * Get recorder's readonly state.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * var state = recorder.getState();\r\n         * @returns {String} Returns recording state.\r\n         */\r\n        getState: function() {\r\n            return self.state;\r\n        },\r\n\r\n        /**\r\n         * Destroy RecordRTC instance. Clear all recorders and objects.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * recorder.destroy();\r\n         */\r\n        destroy: function() {\r\n            var disableLogs = config.disableLogs;\r\n\r\n            config.disableLogs = true;\r\n            self.reset();\r\n            config = {};\r\n            setState('destroyed');\r\n            returnObject = self = null;\r\n\r\n            if (Storage.AudioContextConstructor) {\r\n                Storage.AudioContextConstructor.close();\r\n                Storage.AudioContextConstructor = null;\r\n            }\r\n\r\n            if (!disableLogs) {\r\n                console.warn('RecordRTC is destroyed.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * RecordRTC version number\r\n         * @property {String} version - Release version number.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * alert(recorder.version);\r\n         */\r\n        version: '5.4.6'\r\n    };\r\n\r\n    if (!this) {\r\n        self = returnObject;\r\n        return returnObject;\r\n    }\r\n\r\n    // if someone wants to use RecordRTC with the \"new\" keyword.\r\n    for (var prop in returnObject) {\r\n        this[prop] = returnObject[prop];\r\n    }\r\n\r\n    self = this;\r\n\r\n    return returnObject;\r\n}\r\n\r\nRecordRTC.version = '5.4.6';\r\n\r\nif (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n    module.exports = RecordRTC;\r\n}\r\n\r\nif (typeof define === 'function' && define.amd) {\r\n    define('RecordRTC', [], function() {\r\n        return RecordRTC;\r\n    });\r\n}\n\r\nRecordRTC.getFromDisk = function(type, callback) {\r\n    if (!callback) {\r\n        throw 'callback is mandatory.';\r\n    }\r\n\r\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\r\n    DiskStorage.Fetch(function(dataURL, _type) {\r\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\r\n            callback(dataURL);\r\n        }\r\n\r\n        if (type === 'all' && callback) {\r\n            callback(dataURL, _type.replace('Blob', ''));\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof RecordRTC\r\n * @example\r\n * RecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nRecordRTC.writeToDisk = function(options) {\r\n    console.log('Writing recorded blob(s) to disk!');\r\n    options = options || {};\r\n    if (options.audio && options.video && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                options.gif.getDataURL(function(gifDataURL) {\r\n                    DiskStorage.Store({\r\n                        audioBlob: audioDataURL,\r\n                        videoBlob: videoDataURL,\r\n                        gifBlob: gifDataURL\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.video) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    videoBlob: videoDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.video && options.gif) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    videoBlob: videoDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            DiskStorage.Store({\r\n                audioBlob: audioDataURL\r\n            });\r\n        });\r\n    } else if (options.video) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            DiskStorage.Store({\r\n                videoBlob: videoDataURL\r\n            });\r\n        });\r\n    } else if (options.gif) {\r\n        options.gif.getDataURL(function(gifDataURL) {\r\n            DiskStorage.Store({\r\n                gifBlob: gifDataURL\r\n            });\r\n        });\r\n    }\r\n};\n\r\n// __________________________\r\n// RecordRTC-Configuration.js\r\n\r\n/**\r\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCConfiguration\r\n * @class\r\n * @example\r\n * var options = RecordRTCConfiguration(mediaStream, options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\r\n */\r\n\r\nfunction RecordRTCConfiguration(mediaStream, config) {\r\n    if (!config.recorderType && !config.type) {\r\n        if (!!config.audio && !!config.video) {\r\n            config.type = 'video';\r\n        } else if (!!config.audio && !config.video) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    if (config.recorderType && !config.type) {\r\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder) {\r\n            config.type = 'video';\r\n        } else if (config.recorderType === GifRecorder) {\r\n            config.type = 'gif';\r\n        } else if (config.recorderType === StereoAudioRecorder) {\r\n            config.type = 'audio';\r\n        } else if (config.recorderType === MediaStreamRecorder) {\r\n            if (mediaStream.getAudioTracks().length && mediaStream.getVideoTracks().length) {\r\n                config.type = 'video';\r\n            } else if (mediaStream.getAudioTracks().length && !mediaStream.getVideoTracks().length) {\r\n                config.type = 'audio';\r\n            } else if (!mediaStream.getAudioTracks().length && mediaStream.getVideoTracks().length) {\r\n                config.type = 'audio';\r\n            } else {\r\n                // config.type = 'UnKnown';\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (!config.mimeType) {\r\n            config.mimeType = 'video/webm';\r\n        }\r\n\r\n        if (!config.type) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n\r\n        if (!config.bitsPerSecond) {\r\n            // config.bitsPerSecond = 128000;\r\n        }\r\n    }\r\n\r\n    // consider default type=audio\r\n    if (!config.type) {\r\n        if (config.mimeType) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n        if (!config.type) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    return config;\r\n}\n\r\n// __________________\r\n// GetRecorderType.js\r\n\r\n/**\r\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It returns best recorder-type available for your browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef GetRecorderType\r\n * @class\r\n * @example\r\n * var RecorderType = GetRecorderType(options);\r\n * var recorder = new RecorderType(options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction GetRecorderType(mediaStream, config) {\r\n    var recorder;\r\n\r\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\r\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\r\n    if (isChrome || isEdge || isOpera) {\r\n        // Media Stream Recording API has not been implemented in chrome yet;\r\n        // That's why using WebAudio API to record stereo audio in WAV format\r\n        recorder = StereoAudioRecorder;\r\n    }\r\n\r\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    // video recorder (in WebM format)\r\n    if (config.type === 'video' && (isChrome || isOpera)) {\r\n        recorder = WhammyRecorder;\r\n    }\r\n\r\n    // video recorder (in Gif format)\r\n    if (config.type === 'gif') {\r\n        recorder = GifRecorder;\r\n    }\r\n\r\n    // html2canvas recording!\r\n    if (config.type === 'canvas') {\r\n        recorder = CanvasRecorder;\r\n    }\r\n\r\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if ((mediaStream.getVideoTracks && mediaStream.getVideoTracks().length) || (mediaStream.getAudioTracks && mediaStream.getAudioTracks().length)) {\r\n            // audio-only recording\r\n            if (config.type === 'audio') {\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n                // else recorder = StereoAudioRecorder;\r\n            } else {\r\n                // video or screen tracks\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (config.recorderType) {\r\n        recorder = config.recorderType;\r\n    }\r\n\r\n    if (mediaStream instanceof Array && mediaStream.length) {\r\n        recorder = MultiStreamRecorder;\r\n    }\r\n\r\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\r\n        console.log('Using recorderType:', recorder.name || recorder.constructor.name);\r\n    }\r\n\r\n    return recorder;\r\n}\n\r\n// _____________\r\n// MRecordRTC.js\r\n\r\n/**\r\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\r\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef MRecordRTC\r\n * @class\r\n * @example\r\n * var recorder = new MRecordRTC();\r\n * recorder.addStream(MediaStream);\r\n * recorder.mediaType = {\r\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\r\n *     video: true, // or WhammyRecorder or MediaStreamRecorder\r\n *     gif: true    // or GifRecorder\r\n * };\r\n * // mimeType is optional and should be set only in advance cases.\r\n * recorder.mimeType = {\r\n *     audio: 'audio/wav',\r\n *     video: 'video/webm',\r\n *     gif:   'image/gif'\r\n * };\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction MRecordRTC(mediaStream) {\r\n\r\n    /**\r\n     * This method attaches MediaStream object to {@link MRecordRTC}.\r\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.addStream(MediaStream);\r\n     */\r\n    this.addStream = function(_mediaStream) {\r\n        if (_mediaStream) {\r\n            mediaStream = _mediaStream;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\r\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * var recorder = new MRecordRTC();\r\n     * recorder.mediaType = {\r\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\r\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder\r\n     *     gif  : true  // TRUE or GifRecorder\r\n     * };\r\n     */\r\n    this.mediaType = {\r\n        audio: true,\r\n        video: true\r\n    };\r\n\r\n    /**\r\n     * This method starts recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.startRecording();\r\n     */\r\n    this.startRecording = function() {\r\n        var mediaType = this.mediaType;\r\n        var recorderType;\r\n        var mimeType = this.mimeType || {\r\n            audio: null,\r\n            video: null,\r\n            gif: null\r\n        };\r\n\r\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && mediaStream.getAudioTracks && !mediaStream.getAudioTracks().length) {\r\n            mediaType.audio = false;\r\n        }\r\n\r\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && mediaStream.getVideoTracks && !mediaStream.getVideoTracks().length) {\r\n            mediaType.video = false;\r\n        }\r\n\r\n        if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && mediaStream.getVideoTracks && !mediaStream.getVideoTracks().length) {\r\n            mediaType.gif = false;\r\n        }\r\n\r\n        if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\r\n            throw 'MediaStream must have either audio or video tracks.';\r\n        }\r\n\r\n        if (!!mediaType.audio) {\r\n            recorderType = null;\r\n            if (typeof mediaType.audio === 'function') {\r\n                recorderType = mediaType.audio;\r\n            }\r\n\r\n            this.audioRecorder = new RecordRTC(mediaStream, {\r\n                type: 'audio',\r\n                bufferSize: this.bufferSize,\r\n                sampleRate: this.sampleRate,\r\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.audio,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp\r\n            });\r\n\r\n            if (!mediaType.video) {\r\n                this.audioRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.video) {\r\n            recorderType = null;\r\n            if (typeof mediaType.video === 'function') {\r\n                recorderType = mediaType.video;\r\n            }\r\n\r\n            var newStream = mediaStream;\r\n\r\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\r\n                var videoTrack = mediaStream.getVideoTracks()[0];\r\n\r\n                if (!!navigator.mozGetUserMedia) {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n\r\n                    if (recorderType && recorderType === WhammyRecorder) {\r\n                        // Firefox does NOT support webp-encoding yet\r\n                        recorderType = MediaStreamRecorder;\r\n                    }\r\n                } else {\r\n                    newStream = new MediaStream([videoTrack]);\r\n                }\r\n            }\r\n\r\n            this.videoRecorder = new RecordRTC(newStream, {\r\n                type: 'video',\r\n                video: this.video,\r\n                canvas: this.canvas,\r\n                frameInterval: this.frameInterval || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.video,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp\r\n            });\r\n\r\n            if (!mediaType.audio) {\r\n                this.videoRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.audio && !!mediaType.video) {\r\n            var self = this;\r\n\r\n            // this line prevents StereoAudioRecorder\r\n            // todo: fix it\r\n            if (isMediaRecorderCompatible() /* && !this.audioRecorder */ ) {\r\n                self.audioRecorder = null;\r\n                self.videoRecorder.startRecording();\r\n            } else {\r\n                self.videoRecorder.initRecorder(function() {\r\n                    self.audioRecorder.initRecorder(function() {\r\n                        // Both recorders are ready to record things accurately\r\n                        self.videoRecorder.startRecording();\r\n                        self.audioRecorder.startRecording();\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.gif) {\r\n            recorderType = null;\r\n            if (typeof mediaType.gif === 'function') {\r\n                recorderType = mediaType.gif;\r\n            }\r\n            this.gifRecorder = new RecordRTC(mediaStream, {\r\n                type: 'gif',\r\n                frameRate: this.frameRate || 200,\r\n                quality: this.quality || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.gif\r\n            });\r\n            this.gifRecorder.startRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording.\r\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.stopRecording(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     */\r\n    this.stopRecording = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'audio');\r\n            });\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'video');\r\n            });\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'gif');\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.pauseRecording();\r\n     */\r\n    this.pauseRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.pauseRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.resumeRecording();\r\n     */\r\n    this.resumeRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.resumeRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs.\r\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getBlob(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     * // or\r\n     * var audioBlob = recorder.getBlob().audio;\r\n     * var videoBlob = recorder.getBlob().video;\r\n     */\r\n    this.getBlob = function(callback) {\r\n        var output = {};\r\n\r\n        if (this.audioRecorder) {\r\n            output.audio = this.audioRecorder.getBlob();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            output.video = this.videoRecorder.getBlob();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            output.gif = this.gifRecorder.getBlob();\r\n        }\r\n\r\n        if (callback) {\r\n            callback(output);\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Destroy all recorder instances.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.destroy();\r\n     */\r\n    this.destroy = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.destroy();\r\n            this.audioRecorder = null;\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.destroy();\r\n            this.videoRecorder = null;\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.destroy();\r\n            this.gifRecorder = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs' DataURLs.\r\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getDataURL(function(recording){\r\n     *     var audioDataURL = recording.audio;\r\n     *     var videoDataURL = recording.video;\r\n     *     var gifDataURL   = recording.gif;\r\n     * });\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        this.getBlob(function(blob) {\r\n            if (blob.audio && blob.video) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    getDataURL(blob.video, function(_videoDataURL) {\r\n                        callback({\r\n                            audio: _audioDataURL,\r\n                            video: _videoDataURL\r\n                        });\r\n                    });\r\n                });\r\n            } else if (blob.audio) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    callback({\r\n                        audio: _audioDataURL\r\n                    });\r\n                });\r\n            } else if (blob.video) {\r\n                getDataURL(blob.video, function(_videoDataURL) {\r\n                    callback({\r\n                        video: _videoDataURL\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        function getDataURL(blob, callback00) {\r\n            if (typeof Worker !== 'undefined') {\r\n                var webWorker = processInWebWorker(function readFile(_blob) {\r\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n                });\r\n\r\n                webWorker.onmessage = function(event) {\r\n                    callback00(event.data);\r\n                };\r\n\r\n                webWorker.postMessage(blob);\r\n            } else {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(blob);\r\n                reader.onload = function(event) {\r\n                    callback00(event.target.result);\r\n                };\r\n            }\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                'this.onmessage =  function (e) {' + _function.name + '(e.data);}'\r\n            ], {\r\n                type: 'application/javascript'\r\n            }));\r\n\r\n            var worker = new Worker(blob);\r\n            var url;\r\n            if (typeof URL !== 'undefined') {\r\n                url = URL;\r\n            } else if (typeof webkitURL !== 'undefined') {\r\n                url = webkitURL;\r\n            } else {\r\n                throw 'Neither URL nor webkitURL detected.';\r\n            }\r\n            url.revokeObjectURL(blob);\r\n            return worker;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.writeToDisk();\r\n     */\r\n    this.writeToDisk = function() {\r\n        RecordRTC.writeToDisk({\r\n            audio: this.audioRecorder,\r\n            video: this.videoRecorder,\r\n            gif: this.gifRecorder\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\r\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.save({\r\n     *     audio: 'audio-file-name',\r\n     *     video: 'video-file-name',\r\n     *     gif  : 'gif-file-name'\r\n     * });\r\n     */\r\n    this.save = function(args) {\r\n        args = args || {\r\n            audio: true,\r\n            video: true,\r\n            gif: true\r\n        };\r\n\r\n        if (!!args.audio && this.audioRecorder) {\r\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\r\n        }\r\n\r\n        if (!!args.video && this.videoRecorder) {\r\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\r\n        }\r\n        if (!!args.gif && this.gifRecorder) {\r\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * This method can be used to get all recorded blobs from IndexedDB storage.\r\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\r\n * @param {function} callback - Callback function to get all stored blobs.\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\r\n *     if(type === 'audio') { }\r\n *     if(type === 'video') { }\r\n *     if(type === 'gif')   { }\r\n * });\r\n */\r\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MRecordRTC = MRecordRTC;\r\n}\n\r\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n(function(that) {\r\n    if (!that) {\r\n        return;\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n        return;\r\n    }\r\n\r\n    if (typeof global === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    global.navigator = {\r\n        userAgent: browserFakeUserAgent,\r\n        getUserMedia: function() {}\r\n    };\r\n\r\n    if (!global.console) {\r\n        global.console = {};\r\n    }\r\n\r\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\r\n        global.console.error = global.console.log = global.console.log || function() {\r\n            console.log(arguments);\r\n        };\r\n    }\r\n\r\n    if (typeof document === 'undefined') {\r\n        /*global document:true */\r\n        that.document = {};\r\n\r\n        document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n            var obj = {\r\n                getContext: function() {\r\n                    return obj;\r\n                },\r\n                play: function() {},\r\n                pause: function() {},\r\n                drawImage: function() {},\r\n                toDataURL: function() {\r\n                    return '';\r\n                }\r\n            };\r\n            return obj;\r\n        };\r\n\r\n        that.HTMLVideoElement = function() {};\r\n    }\r\n\r\n    if (typeof location === 'undefined') {\r\n        /*global location:true */\r\n        that.location = {\r\n            protocol: 'file:',\r\n            href: '',\r\n            hash: ''\r\n        };\r\n    }\r\n\r\n    if (typeof screen === 'undefined') {\r\n        /*global screen:true */\r\n        that.screen = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n    }\r\n\r\n    if (typeof URL === 'undefined') {\r\n        /*global screen:true */\r\n        that.URL = {\r\n            createObjectURL: function() {\r\n                return '';\r\n            },\r\n            revokeObjectURL: function() {\r\n                return '';\r\n            }\r\n        };\r\n    }\r\n\r\n    /*global window:true */\r\n    that.window = global;\r\n})(typeof global !== 'undefined' ? global : null);\n\r\n// _____________________________\r\n// Cross-Browser-Declarations.js\r\n\r\n// animation-frame used in WebM recording\r\n\r\n/*jshint -W079 */\r\nvar requestAnimationFrame = window.requestAnimationFrame;\r\nif (typeof requestAnimationFrame === 'undefined') {\r\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = webkitRequestAnimationFrame;\r\n    } else if (typeof mozRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = mozRequestAnimationFrame;\r\n    } else if (typeof msRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = msRequestAnimationFrame;\r\n    } else if (typeof requestAnimationFrame === 'undefined') {\r\n        // via: https://gist.github.com/paulirish/1579671\r\n        var lastTime = 0;\r\n\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = function(callback, element) {\r\n            var currTime = new Date().getTime();\r\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n            var id = setTimeout(function() {\r\n                callback(currTime + timeToCall);\r\n            }, timeToCall);\r\n            lastTime = currTime + timeToCall;\r\n            return id;\r\n        };\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar cancelAnimationFrame = window.cancelAnimationFrame;\r\nif (typeof cancelAnimationFrame === 'undefined') {\r\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = webkitCancelAnimationFrame;\r\n    } else if (typeof mozCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = mozCancelAnimationFrame;\r\n    } else if (typeof msCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = msCancelAnimationFrame;\r\n    } else if (typeof cancelAnimationFrame === 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = function(id) {\r\n            clearTimeout(id);\r\n        };\r\n    }\r\n}\r\n\r\n// WebAudio API representer\r\nvar AudioContext = window.AudioContext;\r\n\r\nif (typeof AudioContext === 'undefined') {\r\n    if (typeof webkitAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    if (typeof mozAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = mozAudioContext;\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar URL = window.URL;\r\n\r\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n    /*global URL:true */\r\n    URL = webkitURL;\r\n}\r\n\r\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n    }\r\n\r\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.mozGetUserMedia;\r\n    }\r\n}\r\n\r\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\r\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\r\nvar isSafari = navigator.userAgent.toLowerCase().indexOf('safari/') > -1;\r\nvar isChrome = (!isOpera && !isEdge && !!navigator.webkitGetUserMedia) || isElectron() || isSafari;\r\n\r\nvar MediaStream = window.MediaStream;\r\n\r\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n    MediaStream = webkitMediaStream;\r\n}\r\n\r\n/*global MediaStream:true */\r\nif (typeof MediaStream !== 'undefined') {\r\n    if (!('getVideoTracks' in MediaStream.prototype)) {\r\n        MediaStream.prototype.getVideoTracks = function() {\r\n            if (!this.getTracks) {\r\n                return [];\r\n            }\r\n\r\n            var tracks = [];\r\n            this.getTracks().forEach(function(track) {\r\n                if (track.kind.toString().indexOf('video') !== -1) {\r\n                    tracks.push(track);\r\n                }\r\n            });\r\n            return tracks;\r\n        };\r\n\r\n        MediaStream.prototype.getAudioTracks = function() {\r\n            if (!this.getTracks) {\r\n                return [];\r\n            }\r\n\r\n            var tracks = [];\r\n            this.getTracks().forEach(function(track) {\r\n                if (track.kind.toString().indexOf('audio') !== -1) {\r\n                    tracks.push(track);\r\n                }\r\n            });\r\n            return tracks;\r\n        };\r\n    }\r\n\r\n    // override \"stop\" method for all browsers\r\n    if (typeof MediaStream.prototype.stop === 'undefined') {\r\n        MediaStream.prototype.stop = function() {\r\n            this.getTracks().forEach(function(track) {\r\n                track.stop();\r\n            });\r\n        };\r\n    }\r\n}\r\n\r\n// below function via: http://goo.gl/B3ae8c\r\n/**\r\n * @param {number} bytes - Pass bytes and get formafted string.\r\n * @returns {string} - formafted string\r\n * @example\r\n * bytesToSize(1024*1024*5) === '5 GB'\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction bytesToSize(bytes) {\r\n    var k = 1000;\r\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (bytes === 0) {\r\n        return '0 Bytes';\r\n    }\r\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\r\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object. This parameter is required.\r\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\r\n * @example\r\n * invokeSaveAsDialog(blob or file, [optional] fileName);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction invokeSaveAsDialog(file, fileName) {\r\n    if (!file) {\r\n        throw 'Blob object is required.';\r\n    }\r\n\r\n    if (!file.type) {\r\n        try {\r\n            file.type = 'video/webm';\r\n        } catch (e) {}\r\n    }\r\n\r\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\r\n\r\n    if (fileName && fileName.indexOf('.') !== -1) {\r\n        var splitted = fileName.split('.');\r\n        fileName = splitted[0];\r\n        fileExtension = splitted[1];\r\n    }\r\n\r\n    var fileFullName = (fileName || (Math.round(Math.random() * 9999999999) + 888888888)) + '.' + fileExtension;\r\n\r\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\r\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\r\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\r\n        return navigator.msSaveBlob(file, fileFullName);\r\n    }\r\n\r\n    var hyperlink = document.createElement('a');\r\n    hyperlink.href = URL.createObjectURL(file);\r\n    hyperlink.download = fileFullName;\r\n\r\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\r\n    (document.body || document.documentElement).appendChild(hyperlink);\r\n\r\n    if (typeof hyperlink.click === 'function') {\r\n        hyperlink.click();\r\n    } else {\r\n        hyperlink.target = '_blank';\r\n        hyperlink.dispatchEvent(new MouseEvent('click', {\r\n            view: window,\r\n            bubbles: true,\r\n            cancelable: true\r\n        }));\r\n    }\r\n\r\n    URL.revokeObjectURL(hyperlink.href);\r\n}\r\n\r\n/**\r\n * from: https://github.com/cheton/is-electron/blob/master/index.js\r\n **/\r\nfunction isElectron() {\r\n    // Renderer process\r\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\r\n        return true;\r\n    }\r\n\r\n    // Main process\r\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\r\n        return true;\r\n    }\r\n\r\n    // Detect the user agent when the `nodeIntegration` option is set to true\r\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction setSrcObject(stream, element, ignoreCreateObjectURL) {\r\n    if ('createObjectURL' in URL && !ignoreCreateObjectURL) {\r\n        try {\r\n            element.src = URL.createObjectURL(stream);\r\n        } catch (e) {\r\n            setSrcObject(stream, element, true);\r\n            return;\r\n        }\r\n    } else if ('srcObject' in element) {\r\n        element.srcObject = stream;\r\n    } else if ('mozSrcObject' in element) {\r\n        element.mozSrcObject = stream;\r\n    } else {\r\n        alert('createObjectURL/srcObject both are not supported.');\r\n    }\r\n}\n\r\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\r\n// Storage.js\r\n\r\n/**\r\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @example\r\n * Storage.AudioContext === webkitAudioContext\r\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Storage = {};\r\n\r\nif (typeof AudioContext !== 'undefined') {\r\n    Storage.AudioContext = AudioContext;\r\n} else if (typeof webkitAudioContext !== 'undefined') {\r\n    Storage.AudioContext = webkitAudioContext;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Storage = Storage;\r\n}\n\r\nfunction isMediaRecorderCompatible() {\r\n    var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\r\n    var isChrome = (!!window.chrome && !isOpera) || isElectron();\r\n    var isFirefox = typeof window.InstallTrigger !== 'undefined';\r\n\r\n    if (isFirefox) {\r\n        return true;\r\n    }\r\n\r\n    var nVer = navigator.appVersion;\r\n    var nAgt = navigator.userAgent;\r\n    var fullVersion = '' + parseFloat(navigator.appVersion);\r\n    var majorVersion = parseInt(navigator.appVersion, 10);\r\n    var nameOffset, verOffset, ix;\r\n\r\n    if (isChrome || isOpera) {\r\n        verOffset = nAgt.indexOf('Chrome');\r\n        fullVersion = nAgt.substring(verOffset + 7);\r\n    }\r\n\r\n    // trim the fullVersion string at semicolon/space if present\r\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    majorVersion = parseInt('' + fullVersion, 10);\r\n\r\n    if (isNaN(majorVersion)) {\r\n        fullVersion = '' + parseFloat(navigator.appVersion);\r\n        majorVersion = parseInt(navigator.appVersion, 10);\r\n    }\r\n\r\n    return majorVersion >= 49;\r\n}\n\r\n// ______________________\n// MediaStreamRecorder.js\n\n/**\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\n * @typedef MediaStreamRecorder\n * @class\n * @example\n * var config = {\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\n *     audioBitsPerSecond : 256 * 8 * 1024,\n *     videoBitsPerSecond : 256 * 8 * 1024,\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\n *     checkForInactiveTracks: true,\n *     timeSlice: 1000, // concatenate intervals based blobs\n *     ondataavailable: function() {}, // get intervals based blobs\n *     ignoreMutedMedia: true\n * }\n * var recorder = new MediaStreamRecorder(mediaStream, config);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\n */\n\nfunction MediaStreamRecorder(mediaStream, config) {\n    var self = this;\n\n    if (typeof mediaStream === 'undefined') {\n        throw 'First argument \"MediaStream\" is required.';\n    }\n\n    if (typeof MediaRecorder === 'undefined') {\n        throw 'Your browser does not supports Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\n    }\n\n    config = config || {\n        // bitsPerSecond: 256 * 8 * 1024,\n        mimeType: 'video/webm'\n    };\n\n    if (config.type === 'audio') {\n        if (mediaStream.getVideoTracks().length && mediaStream.getAudioTracks().length) {\n            var stream;\n            if (!!navigator.mozGetUserMedia) {\n                stream = new MediaStream();\n                stream.addTrack(mediaStream.getAudioTracks()[0]);\n            } else {\n                // webkitMediaStream\n                stream = new MediaStream(mediaStream.getAudioTracks());\n            }\n            mediaStream = stream;\n        }\n\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n        }\n\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n            // forcing better codecs on Firefox (via #166)\n            config.mimeType = 'audio/ogg';\n        }\n    }\n\n    var arrayOfBlobs = [];\n\n    /**\n     * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var arrayOfBlobs = recorder.getArrayOfBlobs();\n     * @returns {Array} Returns array of recorded blobs.\n     */\n    this.getArrayOfBlobs = function() {\n        return arrayOfBlobs;\n    };\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        // set defaults\n        self.blob = null;\n        self.clearRecordedData();\n        self.timestamps = [];\n        allStates = [];\n        arrayOfBlobs = [];\n\n        var recorderHints = config;\n\n        if (!config.disableLogs) {\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\n        }\n\n        if (mediaRecorder) {\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\n            mediaRecorder = null;\n        }\n\n        if (isChrome && !isMediaRecorderCompatible()) {\n            // to support video-only recording on stable\n            recorderHints = 'video/vp8';\n        }\n\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\n                if (!config.disableLogs) {\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n                }\n\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n            }\n        }\n\n        // using MediaRecorder API here\n        try {\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\n\n            // reset\n            config.mimeType = recorderHints.mimeType;\n        } catch (e) {\n            // chrome-based fallback\n            mediaRecorder = new MediaRecorder(mediaStream);\n        }\n\n        // old hack?\n        if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\n            if (!config.disableLogs) {\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n            }\n        }\n\n        // ignore muted/disabled/inactive tracks\n        mediaRecorder.ignoreMutedMedia = config.ignoreMutedMedia === true;\n\n        // Dispatching OnDataAvailable Handler\n        mediaRecorder.ondataavailable = function(e) {\n            if (e.data) {\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\n            }\n\n            if (typeof config.timeSlice === 'number') {\n                if (e.data && e.data.size && e.data.size > 100) {\n                    arrayOfBlobs.push(e.data);\n                    updateTimeStamp();\n\n                    if (typeof config.ondataavailable === 'function') {\n                        // intervals based blobs\n                        var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                            type: getMimeType(recorderHints)\n                        });\n                        config.ondataavailable(blob);\n                    }\n                }\n                return;\n            }\n\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\n                // make sure that stopRecording always getting fired\n                // even if there is invalid data\n                if (self.recordingCallback) {\n                    self.recordingCallback(new Blob([], {\n                        type: getMimeType(recorderHints)\n                    }));\n                    self.recordingCallback = null;\n                }\n                return;\n            }\n\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                type: getMimeType(recorderHints)\n            });\n\n            if (self.recordingCallback) {\n                self.recordingCallback(self.blob);\n                self.recordingCallback = null;\n            }\n        };\n\n        mediaRecorder.onstart = function() {\n            allStates.push('started');\n        };\n\n        mediaRecorder.onpause = function() {\n            allStates.push('paused');\n        };\n\n        mediaRecorder.onresume = function() {\n            allStates.push('resumed');\n        };\n\n        mediaRecorder.onstop = function() {\n            allStates.push('stopped');\n        };\n\n        mediaRecorder.onerror = function(error) {\n            allStates.push('error: ' + error);\n\n            if (!config.disableLogs) {\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\n                    console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\n                    console.error('MediaRecorder security error', error);\n                }\n\n                // older code below\n                else if (error.name === 'OutOfMemory') {\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'IllegalStreamModification') {\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'OtherRecordingError') {\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'GenericError') {\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\n                } else {\n                    console.error('MediaRecorder Error', error);\n                }\n            }\n\n            (function(looper) {\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\n                    delete config.timeslice;\n\n                    // 10 minutes, enough?\n                    mediaRecorder.start(10 * 60 * 1000);\n                    return;\n                }\n\n                setTimeout(looper, 1000);\n            })();\n\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\n                mediaRecorder.stop();\n            }\n        };\n\n        if (typeof config.timeSlice === 'number') {\n            updateTimeStamp();\n            mediaRecorder.start(config.timeSlice);\n        } else {\n            // default is 60 minutes; enough?\n            // use config => {timeSlice: 1000} otherwise\n\n            mediaRecorder.start(3.6e+6);\n        }\n\n        if (config.initCallback) {\n            config.initCallback(); // old code\n        }\n    };\n\n    /**\n     * @property {Array} timestamps - Array of time stamps\n     * @memberof MediaStreamRecorder\n     * @example\n     * console.log(recorder.timestamps);\n     */\n    this.timestamps = [];\n\n    function updateTimeStamp() {\n        self.timestamps.push(new Date().getTime());\n\n        if (typeof config.onTimeStamp === 'function') {\n            config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\n        }\n    }\n\n    function getMimeType(secondObject) {\n        if (mediaRecorder && mediaRecorder.mimeType) {\n            return mediaRecorder.mimeType;\n        }\n\n        return secondObject.mimeType || 'video/webm';\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        callback = callback || function() {};\n\n        self.manuallyStopped = true; // used inside the mediaRecorder.onerror\n\n        if (!mediaRecorder) {\n            return;\n        }\n\n        this.recordingCallback = callback;\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.stop();\n        }\n\n        if (typeof config.timeSlice === 'number') {\n            setTimeout(function() {\n                self.blob = new Blob(arrayOfBlobs, {\n                    type: getMimeType(config)\n                });\n\n                self.recordingCallback(self.blob);\n            }, 100);\n        }\n    };\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.pause();\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'paused') {\n            mediaRecorder.resume();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (mediaRecorder && mediaRecorder.state === 'recording') {\n            self.stop(clearRecordedDataCB);\n        }\n\n        clearRecordedDataCB();\n    };\n\n    function clearRecordedDataCB() {\n        arrayOfBlobs = [];\n        mediaRecorder = null;\n        self.timestamps = [];\n    }\n\n    // Reference to \"MediaRecorder\" object\n    var mediaRecorder;\n\n    /**\n     * Access to native MediaRecorder API\n     * @method\n     * @memberof MediaStreamRecorder\n     * @instance\n     * @example\n     * var internal = recorder.getInternalRecorder();\n     * internal.ondataavailable = function() {}; // override\n     * internal.stream, internal.onpause, internal.onstop, etc.\n     * @returns {Object} Returns internal recording object.\n     */\n    this.getInternalRecorder = function() {\n        return mediaRecorder;\n    };\n\n    function isMediaStreamActive() {\n        if ('active' in mediaStream) {\n            if (!mediaStream.active) {\n                return false;\n            }\n        } else if ('ended' in mediaStream) { // old hack\n            if (mediaStream.ended) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function() {\n     *     var blob = recorder.blob;\n     * });\n     */\n    this.blob = null;\n\n\n    /**\n     * Get MediaRecorder readonly state.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var state = recorder.getState();\n     * @returns {String} Returns recording state.\n     */\n    this.getState = function() {\n        if (!mediaRecorder) {\n            return 'inactive';\n        }\n\n        return mediaRecorder.state || 'inactive';\n    };\n\n    // list of all recording states\n    var allStates = [];\n\n    /**\n     * Get MediaRecorder all recording states.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var state = recorder.getAllStates();\n     * @returns {Array} Returns all recording states\n     */\n    this.getAllStates = function() {\n        return allStates;\n    };\n\n    // if any Track within the MediaStream is muted or not enabled at any time, \n    // the browser will only record black frames \n    // or silence since that is the content produced by the Track\n    // so we need to stopRecording as soon as any single track ends.\n    if (typeof config.checkForInactiveTracks === 'undefined') {\n        config.checkForInactiveTracks = false; // disable to minimize CPU usage\n    }\n\n    var self = this;\n\n    // this method checks if media stream is stopped\n    // or if any track is ended.\n    (function looper() {\n        if (!mediaRecorder || config.checkForInactiveTracks === false) {\n            return;\n        }\n\n        if (isMediaStreamActive() === false) {\n            if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n            }\n            self.stop();\n            return;\n        }\n\n        setTimeout(looper, 1000); // check every second\n    })();\n\n    // for debugging\n    this.name = 'MediaStreamRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\n}\n\r\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\r\n// https://github.com/mattdiamond/Recorderjs#license-mit\r\n// ______________________\r\n// StereoAudioRecorder.js\r\n\r\n/**\r\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\r\n * @summary JavaScript standalone object for stereo audio recording.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef StereoAudioRecorder\r\n * @class\r\n * @example\r\n * var recorder = new StereoAudioRecorder(MediaStream, {\r\n *     sampleRate: 44100,\r\n *     bufferSize: 4096\r\n * });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\r\n */\r\n\r\nfunction StereoAudioRecorder(mediaStream, config) {\r\n    if (!mediaStream.getAudioTracks().length) {\r\n        throw 'Your stream has no audio tracks.';\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var self = this;\r\n\r\n    // variables\r\n    var leftchannel = [];\r\n    var rightchannel = [];\r\n    var recording = false;\r\n    var recordingLength = 0;\r\n    var jsAudioNode;\r\n\r\n    var numberOfAudioChannels = 2;\r\n\r\n    /**\r\n     * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n     * @property {number} desiredSampRate - Desired Bits per sample * 1000\r\n     * @memberof StereoAudioRecorder\r\n     * @instance\r\n     * @example\r\n     * var recorder = StereoAudioRecorder(mediaStream, {\r\n     *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n     * });\r\n     */\r\n    var desiredSampRate = config.desiredSampRate;\r\n\r\n    // backward compatibility\r\n    if (config.leftChannel === true) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (config.numberOfAudioChannels === 1) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\r\n        numberOfAudioChannels = 2;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('StereoAudioRecorder is set to record number of channels: ', numberOfAudioChannels);\r\n    }\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = true;\r\n    }\r\n\r\n    function isMediaStreamActive() {\r\n        if (config.checkForInactiveTracks === false) {\r\n            // always return \"true\"\r\n            return true;\r\n        }\r\n\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        resetVariables();\r\n\r\n        isAudioProcessStarted = isPaused = false;\r\n        recording = true;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            looper();\r\n        }\r\n    };\r\n\r\n    function mergeLeftRightBuffers(config, callback) {\r\n        function mergeAudioBuffers(config, cb) {\r\n            var numberOfAudioChannels = config.numberOfAudioChannels;\r\n\r\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\r\n            var leftBuffers = config.leftBuffers.slice(0);\r\n            var rightBuffers = config.rightBuffers.slice(0);\r\n            var sampleRate = config.sampleRate;\r\n            var internalInterleavedLength = config.internalInterleavedLength;\r\n            var desiredSampRate = config.desiredSampRate;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                    rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            // set sample rate as desired sample rate\r\n            if (desiredSampRate) {\r\n                sampleRate = desiredSampRate;\r\n            }\r\n\r\n            // for changing the sampling rate, reference:\r\n            // http://stackoverflow.com/a/28977136/552182\r\n            function interpolateArray(data, newSampleRate, oldSampleRate) {\r\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\r\n                var newData = [];\r\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\r\n                newData[0] = data[0];\r\n                for (var i = 1; i < fitCount - 1; i++) {\r\n                    var tmp = i * springFactor;\r\n                    var before = Number(Math.floor(tmp)).toFixed();\r\n                    var after = Number(Math.ceil(tmp)).toFixed();\r\n                    var atPoint = tmp - before;\r\n                    newData[i] = linearInterpolate(data[before], data[after], atPoint);\r\n                }\r\n                newData[fitCount - 1] = data[data.length - 1];\r\n                return newData;\r\n            }\r\n\r\n            function linearInterpolate(before, after, atPoint) {\r\n                return before + (after - before) * atPoint;\r\n            }\r\n\r\n            function mergeBuffers(channelBuffer, rLength) {\r\n                var result = new Float64Array(rLength);\r\n                var offset = 0;\r\n                var lng = channelBuffer.length;\r\n\r\n                for (var i = 0; i < lng; i++) {\r\n                    var buffer = channelBuffer[i];\r\n                    result.set(buffer, offset);\r\n                    offset += buffer.length;\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            function interleave(leftChannel, rightChannel) {\r\n                var length = leftChannel.length + rightChannel.length;\r\n\r\n                var result = new Float64Array(length);\r\n\r\n                var inputIndex = 0;\r\n\r\n                for (var index = 0; index < length;) {\r\n                    result[index++] = leftChannel[inputIndex];\r\n                    result[index++] = rightChannel[inputIndex];\r\n                    inputIndex++;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function writeUTFBytes(view, offset, string) {\r\n                var lng = string.length;\r\n                for (var i = 0; i < lng; i++) {\r\n                    view.setUint8(offset + i, string.charCodeAt(i));\r\n                }\r\n            }\r\n\r\n            // interleave both channels together\r\n            var interleaved;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                interleaved = interleave(leftBuffers, rightBuffers);\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                interleaved = leftBuffers;\r\n            }\r\n\r\n            var interleavedLength = interleaved.length;\r\n\r\n            // create wav file\r\n            var resultingBufferLength = 44 + interleavedLength * 2;\r\n\r\n            var buffer = new ArrayBuffer(resultingBufferLength);\r\n\r\n            var view = new DataView(buffer);\r\n\r\n            // RIFF chunk descriptor/identifier \r\n            writeUTFBytes(view, 0, 'RIFF');\r\n\r\n            // RIFF chunk length\r\n            view.setUint32(4, 44 + interleavedLength * 2, true);\r\n\r\n            // RIFF type \r\n            writeUTFBytes(view, 8, 'WAVE');\r\n\r\n            // format chunk identifier \r\n            // FMT sub-chunk\r\n            writeUTFBytes(view, 12, 'fmt ');\r\n\r\n            // format chunk length \r\n            view.setUint32(16, 16, true);\r\n\r\n            // sample format (raw)\r\n            view.setUint16(20, 1, true);\r\n\r\n            // stereo (2 channels)\r\n            view.setUint16(22, numberOfAudioChannels, true);\r\n\r\n            // sample rate \r\n            view.setUint32(24, sampleRate, true);\r\n\r\n            // byte rate (sample rate * block align)\r\n            view.setUint32(28, sampleRate * 2, true);\r\n\r\n            // block align (channel count * bytes per sample) \r\n            view.setUint16(32, numberOfAudioChannels * 2, true);\r\n\r\n            // bits per sample \r\n            view.setUint16(34, 16, true);\r\n\r\n            // data sub-chunk\r\n            // data chunk identifier \r\n            writeUTFBytes(view, 36, 'data');\r\n\r\n            // data chunk length \r\n            view.setUint32(40, interleavedLength * 2, true);\r\n\r\n            // write the PCM samples\r\n            var lng = interleavedLength;\r\n            var index = 44;\r\n            var volume = 1;\r\n            for (var i = 0; i < lng; i++) {\r\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\r\n                index += 2;\r\n            }\r\n\r\n            if (cb) {\r\n                return cb({\r\n                    buffer: buffer,\r\n                    view: view\r\n                });\r\n            }\r\n\r\n            postMessage({\r\n                buffer: buffer,\r\n                view: view\r\n            });\r\n        }\r\n\r\n        if (isEdge || isOpera || isSafari || config.noWorker) {\r\n            mergeAudioBuffers(config, function(data) {\r\n                callback(data.buffer, data.view);\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        var webWorker = processInWebWorker(mergeAudioBuffers);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            callback(event.data.buffer, event.data.view);\r\n\r\n            // release memory\r\n            URL.revokeObjectURL(webWorker.workerURL);\r\n        };\r\n\r\n        webWorker.postMessage(config);\r\n    }\r\n\r\n    function processInWebWorker(_function) {\r\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(),\r\n            ';this.onmessage =  function (e) {' + _function.name + '(e.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(workerURL);\r\n        worker.workerURL = workerURL;\r\n        return worker;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        // stop recording\r\n        recording = false;\r\n\r\n        mergeLeftRightBuffers({\r\n            desiredSampRate: desiredSampRate,\r\n            sampleRate: sampleRate,\r\n            numberOfAudioChannels: numberOfAudioChannels,\r\n            internalInterleavedLength: recordingLength,\r\n            leftBuffers: leftchannel,\r\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel\r\n        }, function(buffer, view) {\r\n            /**\r\n             * @property {Blob} blob - The recorded blob object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            self.blob = new Blob([view], {\r\n                type: 'audio/wav'\r\n            });\r\n\r\n            /**\r\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var buffer = recorder.buffer;\r\n             * });\r\n             */\r\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\r\n\r\n            /**\r\n             * @property {DataView} view - The recorded data-view object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var view = recorder.view;\r\n             * });\r\n             */\r\n            self.view = view;\r\n\r\n            self.sampleRate = desiredSampRate || sampleRate;\r\n            self.bufferSize = bufferSize;\r\n\r\n            // recorded audio length\r\n            self.length = recordingLength;\r\n\r\n            isAudioProcessStarted = false;\r\n\r\n            if (callback) {\r\n                callback(self.blob);\r\n            }\r\n        });\r\n    };\r\n\r\n    if (!Storage.AudioContextConstructor) {\r\n        Storage.AudioContextConstructor = new Storage.AudioContext();\r\n    }\r\n\r\n    var context = Storage.AudioContextConstructor;\r\n\r\n    // creates an audio node from the microphone incoming stream\r\n    var audioInput = context.createMediaStreamSource(mediaStream);\r\n\r\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n\r\n    /**\r\n     * From the spec: This value controls how frequently the audioprocess event is\r\n     * dispatched and how many sample-frames need to be processed each call.\r\n     * Lower values for buffer size will result in a lower (better) latency.\r\n     * Higher values will be necessary to avoid audio breakup and glitches\r\n     * The size of the buffer (in sample-frames) which needs to\r\n     * be processed each time onprocessaudio is called.\r\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     bufferSize: 4096\r\n     * });\r\n     */\r\n\r\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\r\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\r\n\r\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\r\n        if (!config.disableLogs) {\r\n            console.warn('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\r\n        }\r\n    }\r\n\r\n    if (context.createJavaScriptNode) {\r\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else if (context.createScriptProcessor) {\r\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else {\r\n        throw 'WebAudio API has no support on this browser.';\r\n    }\r\n\r\n    // connect the stream to the script processor\r\n    audioInput.connect(jsAudioNode);\r\n\r\n    if (!config.bufferSize) {\r\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\r\n    }\r\n\r\n    /**\r\n     * The sample rate (in sample-frames per second) at which the\r\n     * AudioContext handles audio. It is assumed that all AudioNodes\r\n     * in the context run at this rate. In making this assumption,\r\n     * sample-rate converters or \"varispeed\" processors are not supported\r\n     * in real-time processing.\r\n     * The sampleRate parameter describes the sample-rate of the\r\n     * linear PCM audio data in the buffer in sample-frames per second.\r\n     * An implementation must support sample-rates in at least\r\n     * the range 22050 to 96000.\r\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     sampleRate: 44100\r\n     * });\r\n     */\r\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\r\n\r\n    if (sampleRate < 22050 || sampleRate > 96000) {\r\n        // Ref: http://stackoverflow.com/a/26303918/552182\r\n        if (!config.disableLogs) {\r\n            console.warn('sample-rate must be under range 22050 and 96000.');\r\n        }\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('sample-rate', sampleRate);\r\n        console.log('buffer-size', bufferSize);\r\n\r\n        if (config.desiredSampRate) {\r\n            console.log('Desired sample-rate', config.desiredSampRate);\r\n        }\r\n    }\r\n\r\n    var isPaused = false;\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        if (!recording) {\r\n            if (!config.disableLogs) {\r\n                console.log('Seems recording has been restarted.');\r\n            }\r\n            this.record();\r\n            return;\r\n        }\r\n\r\n        isPaused = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        config.checkForInactiveTracks = false;\r\n\r\n        if (recording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function resetVariables() {\r\n        leftchannel = [];\r\n        rightchannel = [];\r\n        recordingLength = 0;\r\n        isAudioProcessStarted = false;\r\n        recording = false;\r\n        isPaused = false;\r\n        context = null;\r\n\r\n        self.leftchannel = leftchannel;\r\n        self.rightchannel = rightchannel;\r\n        self.numberOfAudioChannels = numberOfAudioChannels;\r\n        self.desiredSampRate = desiredSampRate;\r\n        self.sampleRate = sampleRate;\r\n        self.recordingLength = recordingLength;\r\n\r\n        intervalsBasedBuffers = {\r\n            left: [],\r\n            right: [],\r\n            recordingLength: 0\r\n        };\r\n    }\r\n\r\n    function clearRecordedDataCB() {\r\n        if (jsAudioNode) {\r\n            jsAudioNode.onaudioprocess = null;\r\n            jsAudioNode.disconnect();\r\n            jsAudioNode = null;\r\n        }\r\n\r\n        if (audioInput) {\r\n            audioInput.disconnect();\r\n            audioInput = null;\r\n        }\r\n\r\n        resetVariables();\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'StereoAudioRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var isAudioProcessStarted = false;\r\n\r\n    function onAudioProcessDataAvailable(e) {\r\n        if (isPaused) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            jsAudioNode.disconnect();\r\n            recording = false;\r\n        }\r\n\r\n        if (!recording) {\r\n            if (audioInput) {\r\n                audioInput.disconnect();\r\n                audioInput = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * This method is called on \"onaudioprocess\" event's first invocation.\r\n         * @method {function} onAudioProcessStarted\r\n         * @memberof StereoAudioRecorder\r\n         * @example\r\n         * recorder.onAudioProcessStarted: function() { };\r\n         */\r\n        if (!isAudioProcessStarted) {\r\n            isAudioProcessStarted = true;\r\n            if (config.onAudioProcessStarted) {\r\n                config.onAudioProcessStarted();\r\n            }\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        }\r\n\r\n        var left = e.inputBuffer.getChannelData(0);\r\n\r\n        // we clone the samples\r\n        var chLeft = new Float32Array(left);\r\n        leftchannel.push(chLeft);\r\n\r\n        if (numberOfAudioChannels === 2) {\r\n            var right = e.inputBuffer.getChannelData(1);\r\n            var chRight = new Float32Array(right);\r\n            rightchannel.push(chRight);\r\n        }\r\n\r\n        recordingLength += bufferSize;\r\n\r\n        // export raw PCM\r\n        self.recordingLength = recordingLength;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            intervalsBasedBuffers.recordingLength += bufferSize;\r\n            intervalsBasedBuffers.left.push(chLeft);\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                intervalsBasedBuffers.right.push(chRight);\r\n            }\r\n        }\r\n    }\r\n\r\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\r\n\r\n    // to prevent self audio to be connected with speakers\r\n    jsAudioNode.connect(context.destination);\r\n\r\n    // export raw PCM\r\n    this.leftchannel = leftchannel;\r\n    this.rightchannel = rightchannel;\r\n    this.numberOfAudioChannels = numberOfAudioChannels;\r\n    this.desiredSampRate = desiredSampRate;\r\n    this.sampleRate = sampleRate;\r\n    self.recordingLength = recordingLength;\r\n\r\n    // helper for intervals based blobs\r\n    var intervalsBasedBuffers = {\r\n        left: [],\r\n        right: [],\r\n        recordingLength: 0\r\n    };\r\n\r\n    // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\r\n    function looper() {\r\n        if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (intervalsBasedBuffers.left.length) {\r\n            mergeLeftRightBuffers({\r\n                desiredSampRate: desiredSampRate,\r\n                sampleRate: sampleRate,\r\n                numberOfAudioChannels: numberOfAudioChannels,\r\n                internalInterleavedLength: intervalsBasedBuffers.recordingLength,\r\n                leftBuffers: intervalsBasedBuffers.left,\r\n                rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\r\n            }, function(buffer, view) {\r\n                var blob = new Blob([view], {\r\n                    type: 'audio/wav'\r\n                });\r\n                config.ondataavailable(blob);\r\n\r\n                setTimeout(looper, config.timeSlice);\r\n            });\r\n\r\n            intervalsBasedBuffers = {\r\n                left: [],\r\n                right: [],\r\n                recordingLength: 0\r\n            };\r\n        } else {\r\n            setTimeout(looper, config.timeSlice);\r\n        }\r\n    }\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\r\n}\r\n\r\n// _________________\r\n// CanvasRecorder.js\r\n\r\n/**\r\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\r\n * @summary HTML2Canvas recording into video WebM.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef CanvasRecorder\r\n * @class\r\n * @example\r\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\r\n * @param {object} config - {disableLogs:true, initCallback: function}\r\n */\r\n\r\nfunction CanvasRecorder(htmlElement, config) {\r\n    if (typeof html2canvas === 'undefined') {\r\n        throw 'Please link: https://cdn.webrtc-experiment.com/screenshot.js';\r\n    }\r\n\r\n    config = config || {};\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    // via DetectRTC.js\r\n    var isCanvasSupportsStreamCapturing = false;\r\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\r\n        if (item in document.createElement('canvas')) {\r\n            isCanvasSupportsStreamCapturing = true;\r\n        }\r\n    });\r\n\r\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\r\n\r\n    var chromeVersion = 50;\r\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\r\n    if (_isChrome && matchArray && matchArray[2]) {\r\n        chromeVersion = parseInt(matchArray[2], 10);\r\n    }\r\n\r\n    if (_isChrome && chromeVersion < 52) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    var globalCanvas, mediaStreamRecorder;\r\n\r\n    if (isCanvasSupportsStreamCapturing) {\r\n        if (!config.disableLogs) {\r\n            console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\r\n        }\r\n\r\n        if (htmlElement instanceof HTMLCanvasElement) {\r\n            globalCanvas = htmlElement;\r\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\r\n            globalCanvas = htmlElement.canvas;\r\n        } else {\r\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\r\n        }\r\n    } else if (!!navigator.mozGetUserMedia) {\r\n        if (!config.disableLogs) {\r\n            console.error('Canvas recording is NOT supported in Firefox.');\r\n        }\r\n    }\r\n\r\n    var isRecording;\r\n\r\n    /**\r\n     * This method records Canvas.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        isRecording = true;\r\n\r\n        if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\r\n            // CanvasCaptureMediaStream\r\n            var canvasMediaStream;\r\n            if ('captureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\r\n            } else if ('mozCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\r\n            } else if ('webkitCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\r\n            }\r\n\r\n            try {\r\n                var mdStream = new MediaStream();\r\n                mdStream.addTrack(canvasMediaStream.getVideoTracks()[0]);\r\n                canvasMediaStream = mdStream;\r\n            } catch (e) {}\r\n\r\n            if (!canvasMediaStream) {\r\n                throw 'captureStream API are NOT available.';\r\n            }\r\n\r\n            // Note: Jan 18, 2016 status is that, \r\n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\r\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\r\n                mimeType: 'video/webm'\r\n            });\r\n            mediaStreamRecorder.record();\r\n        } else {\r\n            whammy.frames = [];\r\n            lastTime = new Date().getTime();\r\n            drawCanvasFrame();\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    this.getWebPImages = function(callback) {\r\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        var framesLength = whammy.frames.length;\r\n        whammy.frames.forEach(function(frame, idx) {\r\n            var framesRemaining = framesLength - idx;\r\n            if (!config.disableLogs) {\r\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\r\n            }\r\n\r\n            if (config.onEncodingCallback) {\r\n                config.onEncodingCallback(framesRemaining, framesLength);\r\n            }\r\n\r\n            var webp = frame.image.toDataURL('image/webp', 1);\r\n            whammy.frames[idx].image = webp;\r\n        });\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Generating WebM');\r\n        }\r\n\r\n        callback();\r\n    };\r\n\r\n    /**\r\n     * This method stops recording Canvas.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        isRecording = false;\r\n\r\n        var that = this;\r\n\r\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\r\n            mediaStreamRecorder.stop(callback);\r\n            return;\r\n        }\r\n\r\n        this.getWebPImages(function() {\r\n            /**\r\n             * @property {Blob} blob - Recorded frames in video/webm blob.\r\n             * @memberof CanvasRecorder\r\n             * @example\r\n             * recorder.stop(function() {\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            whammy.compile(function(blob) {\r\n                if (!config.disableLogs) {\r\n                    console.log('Recording finished!');\r\n                }\r\n\r\n                that.blob = blob;\r\n\r\n                if (that.blob.forEach) {\r\n                    that.blob = new Blob([], {\r\n                        type: 'video/webm'\r\n                    });\r\n                }\r\n\r\n                if (callback) {\r\n                    callback(that.blob);\r\n                }\r\n\r\n                whammy.frames = [];\r\n            });\r\n        });\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.pause();\r\n            return;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.resume();\r\n            return;\r\n        }\r\n\r\n        if (!isRecording) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (isRecording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isRecording = false;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'CanvasRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    function cloneCanvas() {\r\n        //create a new canvas\r\n        var newCanvas = document.createElement('canvas');\r\n        var context = newCanvas.getContext('2d');\r\n\r\n        //set dimensions\r\n        newCanvas.width = htmlElement.width;\r\n        newCanvas.height = htmlElement.height;\r\n\r\n        //apply the old canvas to the new one\r\n        context.drawImage(htmlElement, 0, 0);\r\n\r\n        //return the new canvas\r\n        return newCanvas;\r\n    }\r\n\r\n    function drawCanvasFrame() {\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawCanvasFrame, 500);\r\n        }\r\n\r\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\r\n            var duration = new Date().getTime() - lastTime;\r\n            // via #206, by Jack i.e. @Seymourr\r\n            lastTime = new Date().getTime();\r\n\r\n            whammy.frames.push({\r\n                image: cloneCanvas(),\r\n                duration: duration\r\n            });\r\n\r\n            if (isRecording) {\r\n                setTimeout(drawCanvasFrame, config.frameInterval);\r\n            }\r\n            return;\r\n        }\r\n\r\n        html2canvas(htmlElement, {\r\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\r\n            onrendered: function(canvas) {\r\n                var duration = new Date().getTime() - lastTime;\r\n                if (!duration) {\r\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n\r\n                // via #206, by Jack i.e. @Seymourr\r\n                lastTime = new Date().getTime();\r\n\r\n                whammy.frames.push({\r\n                    image: canvas.toDataURL('image/webp', 1),\r\n                    duration: duration\r\n                });\r\n\r\n                if (isRecording) {\r\n                    setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    var lastTime = new Date().getTime();\r\n\r\n    var whammy = new Whammy.Video(100);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.CanvasRecorder = CanvasRecorder;\r\n}\n\r\n// _________________\r\n// WhammyRecorder.js\r\n\r\n/**\r\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\r\n * @summary Video recording feature in Chrome.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef WhammyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WhammyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction WhammyRecorder(mediaStream, config) {\r\n\r\n    config = config || {};\r\n\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('Using frames-interval:', config.frameInterval);\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (!config.width) {\r\n            config.width = 320;\r\n        }\r\n\r\n        if (!config.height) {\r\n            config.height = 240;\r\n        }\r\n\r\n        if (!config.video) {\r\n            config.video = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        if (!config.canvas) {\r\n            config.canvas = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        canvas.width = config.canvas.width || 320;\r\n        canvas.height = config.canvas.height || 240;\r\n\r\n        context = canvas.getContext('2d');\r\n\r\n        // setting defaults\r\n        if (config.video && config.video instanceof HTMLVideoElement) {\r\n            video = config.video.cloneNode();\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        } else {\r\n            video = document.createElement('video');\r\n\r\n            setSrcObject(mediaStream, video);\r\n\r\n            video.onloadedmetadata = function() { // \"onloadedmetadata\" may NOT work in FF?\r\n                if (config.initCallback) {\r\n                    config.initCallback();\r\n                }\r\n            };\r\n\r\n            video.width = config.video.width;\r\n            video.height = config.video.height;\r\n        }\r\n\r\n        video.muted = true;\r\n        video.play();\r\n\r\n        lastTime = new Date().getTime();\r\n        whammy = new Whammy.Video();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\r\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\r\n        }\r\n\r\n        drawFrames(config.frameInterval);\r\n    };\r\n\r\n    /**\r\n     * Draw and push frames to Whammy\r\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\r\n     */\r\n    function drawFrames(frameInterval) {\r\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\r\n\r\n        var duration = new Date().getTime() - lastTime;\r\n        if (!duration) {\r\n            return setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawFrames, 100);\r\n        }\r\n\r\n        // via #206, by Jack i.e. @Seymourr\r\n        lastTime = new Date().getTime();\r\n\r\n        if (video.paused) {\r\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n            // Tweak for Android Chrome\r\n            video.play();\r\n        }\r\n\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        whammy.frames.push({\r\n            duration: duration,\r\n            image: canvas.toDataURL('image/webp')\r\n        });\r\n\r\n        if (!isStopDrawing) {\r\n            setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n    }\r\n\r\n    function asyncLoop(o) {\r\n        var i = -1,\r\n            length = o.length;\r\n\r\n        (function loop() {\r\n            i++;\r\n            if (i === length) {\r\n                o.callback();\r\n                return;\r\n            }\r\n\r\n            // \"setTimeout\" added by Jim McLeod\r\n            setTimeout(function() {\r\n                o.functionToLoop(loop, i);\r\n            }, 1);\r\n        })();\r\n    }\r\n\r\n\r\n    /**\r\n     * remove black frames from the beginning to the specified frame\r\n     * @param {Array} _frames - array of frames to be checked\r\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\r\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\r\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\r\n     * @returns {Array} - array of frames\r\n     */\r\n    // pull#293 by @volodalexey\r\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\r\n        var localCanvas = document.createElement('canvas');\r\n        localCanvas.width = canvas.width;\r\n        localCanvas.height = canvas.height;\r\n        var context2d = localCanvas.getContext('2d');\r\n        var resultFrames = [];\r\n\r\n        var checkUntilNotBlack = _framesToCheck === -1;\r\n        var endCheckFrame = (_framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length) ?\r\n            _framesToCheck : _frames.length;\r\n        var sampleColor = {\r\n            r: 0,\r\n            g: 0,\r\n            b: 0\r\n        };\r\n        var maxColorDifference = Math.sqrt(\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2)\r\n        );\r\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\r\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\r\n        var doNotCheckNext = false;\r\n\r\n        asyncLoop({\r\n            length: endCheckFrame,\r\n            functionToLoop: function(loop, f) {\r\n                var matchPixCount, endPixCheck, maxPixCount;\r\n\r\n                var finishImage = function() {\r\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\r\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\r\n                    } else {\r\n                        // console.log('frame is passed : ' + f);\r\n                        if (checkUntilNotBlack) {\r\n                            doNotCheckNext = true;\r\n                        }\r\n                        resultFrames.push(_frames[f]);\r\n                    }\r\n                    loop();\r\n                };\r\n\r\n                if (!doNotCheckNext) {\r\n                    var image = new Image();\r\n                    image.onload = function() {\r\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\r\n                        matchPixCount = 0;\r\n                        endPixCheck = imageData.data.length;\r\n                        maxPixCount = imageData.data.length / 4;\r\n\r\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\r\n                            var currentColor = {\r\n                                r: imageData.data[pix],\r\n                                g: imageData.data[pix + 1],\r\n                                b: imageData.data[pix + 2]\r\n                            };\r\n                            var colorDifference = Math.sqrt(\r\n                                Math.pow(currentColor.r - sampleColor.r, 2) +\r\n                                Math.pow(currentColor.g - sampleColor.g, 2) +\r\n                                Math.pow(currentColor.b - sampleColor.b, 2)\r\n                            );\r\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\r\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\r\n                                matchPixCount++;\r\n                            }\r\n                        }\r\n                        finishImage();\r\n                    };\r\n                    image.src = _frames[f].image;\r\n                } else {\r\n                    finishImage();\r\n                }\r\n            },\r\n            callback: function() {\r\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\r\n\r\n                if (resultFrames.length <= 0) {\r\n                    // at least one last frame should be available for next manipulation\r\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\r\n                    resultFrames.push(_frames[_frames.length - 1]);\r\n                }\r\n                callback(resultFrames);\r\n            }\r\n        });\r\n    }\r\n\r\n    var isStopDrawing = false;\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        isStopDrawing = true;\r\n\r\n        var _this = this;\r\n        // analyse of all frames takes some time!\r\n        setTimeout(function() {\r\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\r\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\r\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\r\n            dropBlackFrames(whammy.frames, -1, null, null, function(frames) {\r\n                whammy.frames = frames;\r\n\r\n                // to display advertisement images!\r\n                if (config.advertisement && config.advertisement.length) {\r\n                    whammy.frames = config.advertisement.concat(whammy.frames);\r\n                }\r\n\r\n                /**\r\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\r\n                 * @memberof WhammyRecorder\r\n                 * @example\r\n                 * recorder.stop(function() {\r\n                 *     var blob = recorder.blob;\r\n                 * });\r\n                 */\r\n                whammy.compile(function(blob) {\r\n                    _this.blob = blob;\r\n\r\n                    if (_this.blob.forEach) {\r\n                        _this.blob = new Blob([], {\r\n                            type: 'video/webm'\r\n                        });\r\n                    }\r\n\r\n                    if (callback) {\r\n                        callback(_this.blob);\r\n                    }\r\n                });\r\n            });\r\n        }, 10);\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (isStopDrawing) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (!isStopDrawing) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isStopDrawing = true;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'WhammyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    var video;\r\n    var lastTime;\r\n    var whammy;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WhammyRecorder = WhammyRecorder;\r\n}\n\r\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\r\n// _________\r\n// Whammy.js\r\n\r\n// todo: Firefox now supports webp for webm containers!\r\n// their MediaRecorder implementation works well!\r\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\r\n\r\n/**\r\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\r\n * @summary A real time javascript webm encoder based on a canvas hack.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef Whammy\r\n * @class\r\n * @example\r\n * var recorder = new Whammy().Video(15);\r\n * recorder.add(context || canvas || dataURL);\r\n * var output = recorder.compile();\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Whammy = (function() {\r\n    // a more abstract-ish API\r\n\r\n    function WhammyVideo(duration) {\r\n        this.frames = [];\r\n        this.duration = duration || 1;\r\n        this.quality = 0.8;\r\n    }\r\n\r\n    /**\r\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.add(canvas || context || 'image/webp');\r\n     * @param {string} frame - Canvas || Context || image/webp\r\n     * @param {number} duration - Stick a duration (in milliseconds)\r\n     */\r\n    WhammyVideo.prototype.add = function(frame, duration) {\r\n        if ('canvas' in frame) { //CanvasRenderingContext2D\r\n            frame = frame.canvas;\r\n        }\r\n\r\n        if ('toDataURL' in frame) {\r\n            frame = frame.toDataURL('image/webp', this.quality);\r\n        }\r\n\r\n        if (!(/^data:image\\/webp;base64,/ig).test(frame)) {\r\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\r\n        }\r\n        this.frames.push({\r\n            image: frame,\r\n            duration: duration || this.duration\r\n        });\r\n    };\r\n\r\n    function processInWebWorker(_function) {\r\n        var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n            'this.onmessage =  function (e) {' + _function.name + '(e.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(blob);\r\n        URL.revokeObjectURL(blob);\r\n        return worker;\r\n    }\r\n\r\n    function whammyInWebWorker(frames) {\r\n        function ArrayToWebM(frames) {\r\n            var info = checkFrames(frames);\r\n            if (!info) {\r\n                return [];\r\n            }\r\n\r\n            var clusterMaxDuration = 30000;\r\n\r\n            var EBML = [{\r\n                'id': 0x1a45dfa3, // EBML\r\n                'data': [{\r\n                    'data': 1,\r\n                    'id': 0x4286 // EBMLVersion\r\n                }, {\r\n                    'data': 1,\r\n                    'id': 0x42f7 // EBMLReadVersion\r\n                }, {\r\n                    'data': 4,\r\n                    'id': 0x42f2 // EBMLMaxIDLength\r\n                }, {\r\n                    'data': 8,\r\n                    'id': 0x42f3 // EBMLMaxSizeLength\r\n                }, {\r\n                    'data': 'webm',\r\n                    'id': 0x4282 // DocType\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4287 // DocTypeVersion\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4285 // DocTypeReadVersion\r\n                }]\r\n            }, {\r\n                'id': 0x18538067, // Segment\r\n                'data': [{\r\n                    'id': 0x1549a966, // Info\r\n                    'data': [{\r\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\r\n                        'id': 0x2ad7b1 // TimecodeScale\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x4d80 // MuxingApp\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x5741 // WritingApp\r\n                    }, {\r\n                        'data': doubleToString(info.duration),\r\n                        'id': 0x4489 // Duration\r\n                    }]\r\n                }, {\r\n                    'id': 0x1654ae6b, // Tracks\r\n                    'data': [{\r\n                        'id': 0xae, // TrackEntry\r\n                        'data': [{\r\n                            'data': 1,\r\n                            'id': 0xd7 // TrackNumber\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x73c5 // TrackUID\r\n                        }, {\r\n                            'data': 0,\r\n                            'id': 0x9c // FlagLacing\r\n                        }, {\r\n                            'data': 'und',\r\n                            'id': 0x22b59c // Language\r\n                        }, {\r\n                            'data': 'V_VP8',\r\n                            'id': 0x86 // CodecID\r\n                        }, {\r\n                            'data': 'VP8',\r\n                            'id': 0x258688 // CodecName\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x83 // TrackType\r\n                        }, {\r\n                            'id': 0xe0, // Video\r\n                            'data': [{\r\n                                'data': info.width,\r\n                                'id': 0xb0 // PixelWidth\r\n                            }, {\r\n                                'data': info.height,\r\n                                'id': 0xba // PixelHeight\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            }];\r\n\r\n            //Generate clusters (max duration)\r\n            var frameNumber = 0;\r\n            var clusterTimecode = 0;\r\n            while (frameNumber < frames.length) {\r\n\r\n                var clusterFrames = [];\r\n                var clusterDuration = 0;\r\n                do {\r\n                    clusterFrames.push(frames[frameNumber]);\r\n                    clusterDuration += frames[frameNumber].duration;\r\n                    frameNumber++;\r\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\r\n\r\n                var clusterCounter = 0;\r\n                var cluster = {\r\n                    'id': 0x1f43b675, // Cluster\r\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\r\n                }; //Add cluster to segment\r\n                EBML[1].data.push(cluster);\r\n                clusterTimecode += clusterDuration;\r\n            }\r\n\r\n            return generateEBML(EBML);\r\n        }\r\n\r\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\r\n            return [{\r\n                'data': clusterTimecode,\r\n                'id': 0xe7 // Timecode\r\n            }].concat(clusterFrames.map(function(webp) {\r\n                var block = makeSimpleBlock({\r\n                    discardable: 0,\r\n                    frame: webp.data.slice(4),\r\n                    invisible: 0,\r\n                    keyframe: 1,\r\n                    lacing: 0,\r\n                    trackNum: 1,\r\n                    timecode: Math.round(clusterCounter)\r\n                });\r\n                clusterCounter += webp.duration;\r\n                return {\r\n                    data: block,\r\n                    id: 0xa3\r\n                };\r\n            }));\r\n        }\r\n\r\n        // sums the lengths of all the frames and gets the duration\r\n\r\n        function checkFrames(frames) {\r\n            if (!frames[0]) {\r\n                postMessage({\r\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\r\n                });\r\n                return;\r\n            }\r\n\r\n            var width = frames[0].width,\r\n                height = frames[0].height,\r\n                duration = frames[0].duration;\r\n\r\n            for (var i = 1; i < frames.length; i++) {\r\n                duration += frames[i].duration;\r\n            }\r\n            return {\r\n                duration: duration,\r\n                width: width,\r\n                height: height\r\n            };\r\n        }\r\n\r\n        function numToBuffer(num) {\r\n            var parts = [];\r\n            while (num > 0) {\r\n                parts.push(num & 0xff);\r\n                num = num >> 8;\r\n            }\r\n            return new Uint8Array(parts.reverse());\r\n        }\r\n\r\n        function strToBuffer(str) {\r\n            return new Uint8Array(str.split('').map(function(e) {\r\n                return e.charCodeAt(0);\r\n            }));\r\n        }\r\n\r\n        function bitsToBuffer(bits) {\r\n            var data = [];\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data.push(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return new Uint8Array(data);\r\n        }\r\n\r\n        function generateEBML(json) {\r\n            var ebml = [];\r\n            for (var i = 0; i < json.length; i++) {\r\n                var data = json[i].data;\r\n\r\n                if (typeof data === 'object') {\r\n                    data = generateEBML(data);\r\n                }\r\n\r\n                if (typeof data === 'number') {\r\n                    data = bitsToBuffer(data.toString(2));\r\n                }\r\n\r\n                if (typeof data === 'string') {\r\n                    data = strToBuffer(data);\r\n                }\r\n\r\n                var len = data.size || data.byteLength || data.length;\r\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\r\n                var sizeToString = len.toString(2);\r\n                var padded = (new Array((zeroes * 7 + 7 + 1) - sizeToString.length)).join('0') + sizeToString;\r\n                var size = (new Array(zeroes)).join('0') + '1' + padded;\r\n\r\n                ebml.push(numToBuffer(json[i].id));\r\n                ebml.push(bitsToBuffer(size));\r\n                ebml.push(data);\r\n            }\r\n\r\n            return new Blob(ebml, {\r\n                type: 'video/webm'\r\n            });\r\n        }\r\n\r\n        function toBinStrOld(bits) {\r\n            var data = '';\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function makeSimpleBlock(data) {\r\n            var flags = 0;\r\n\r\n            if (data.keyframe) {\r\n                flags |= 128;\r\n            }\r\n\r\n            if (data.invisible) {\r\n                flags |= 8;\r\n            }\r\n\r\n            if (data.lacing) {\r\n                flags |= (data.lacing << 1);\r\n            }\r\n\r\n            if (data.discardable) {\r\n                flags |= 1;\r\n            }\r\n\r\n            if (data.trackNum > 127) {\r\n                throw 'TrackNumber > 127 not supported';\r\n            }\r\n\r\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).join('') + data.frame;\r\n\r\n            return out;\r\n        }\r\n\r\n        function parseWebP(riff) {\r\n            var VP8 = riff.RIFF[0].WEBP[0];\r\n\r\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\r\n            for (var i = 0, c = []; i < 4; i++) {\r\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\r\n            }\r\n\r\n            var width, height, tmp;\r\n\r\n            //the code below is literally copied verbatim from the bitstream spec\r\n            tmp = (c[1] << 8) | c[0];\r\n            width = tmp & 0x3FFF;\r\n            tmp = (c[3] << 8) | c[2];\r\n            height = tmp & 0x3FFF;\r\n            return {\r\n                width: width,\r\n                height: height,\r\n                data: VP8,\r\n                riff: riff\r\n            };\r\n        }\r\n\r\n        function getStrLength(string, offset) {\r\n            return parseInt(string.substr(offset + 4, 4).split('').map(function(i) {\r\n                var unpadded = i.charCodeAt(0).toString(2);\r\n                return (new Array(8 - unpadded.length + 1)).join('0') + unpadded;\r\n            }).join(''), 2);\r\n        }\r\n\r\n        function parseRIFF(string) {\r\n            var offset = 0;\r\n            var chunks = {};\r\n\r\n            while (offset < string.length) {\r\n                var id = string.substr(offset, 4);\r\n                var len = getStrLength(string, offset);\r\n                var data = string.substr(offset + 4 + 4, len);\r\n                offset += 4 + 4 + len;\r\n                chunks[id] = chunks[id] || [];\r\n\r\n                if (id === 'RIFF' || id === 'LIST') {\r\n                    chunks[id].push(parseRIFF(data));\r\n                } else {\r\n                    chunks[id].push(data);\r\n                }\r\n            }\r\n            return chunks;\r\n        }\r\n\r\n        function doubleToString(num) {\r\n            return [].slice.call(\r\n                new Uint8Array((new Float64Array([num])).buffer), 0).map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).reverse().join('');\r\n        }\r\n\r\n        var webm = new ArrayToWebM(frames.map(function(frame) {\r\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\r\n            webp.duration = frame.duration;\r\n            return webp;\r\n        }));\r\n\r\n        postMessage(webm);\r\n    }\r\n\r\n    /**\r\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.compile(function(blob) {\r\n     *    // blob.size - blob.type\r\n     * });\r\n     */\r\n    WhammyVideo.prototype.compile = function(callback) {\r\n        var webWorker = processInWebWorker(whammyInWebWorker);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            if (event.data.error) {\r\n                console.error(event.data.error);\r\n                return;\r\n            }\r\n            callback(event.data);\r\n        };\r\n\r\n        webWorker.postMessage(this.frames);\r\n    };\r\n\r\n    return {\r\n        /**\r\n         * A more abstract-ish API.\r\n         * @method\r\n         * @memberof Whammy\r\n         * @example\r\n         * recorder = new Whammy().Video(0.8, 100);\r\n         * @param {?number} speed - 0.8\r\n         * @param {?number} quality - 100\r\n         */\r\n        Video: WhammyVideo\r\n    };\r\n})();\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Whammy = Whammy;\r\n}\n\r\n// ______________ (indexed-db)\r\n// DiskStorage.js\r\n\r\n/**\r\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\r\n * @summary Writing blobs into IndexedDB.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @example\r\n * DiskStorage.Store({\r\n *     audioBlob: yourAudioBlob,\r\n *     videoBlob: yourVideoBlob,\r\n *     gifBlob  : yourGifBlob\r\n * });\r\n * DiskStorage.Fetch(function(dataURL, type) {\r\n *     if(type === 'audioBlob') { }\r\n *     if(type === 'videoBlob') { }\r\n *     if(type === 'gifBlob')   { }\r\n * });\r\n * // DiskStorage.dataStoreName = 'recordRTC';\r\n * // DiskStorage.onError = function(error) { };\r\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\r\n * @property {function} Store - This method stores blobs in IndexedDB.\r\n * @property {function} onError - This function is invoked for any known/unknown error.\r\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\n\r\nvar DiskStorage = {\r\n    /**\r\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.init();\r\n     */\r\n    init: function() {\r\n        var self = this;\r\n\r\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\r\n            console.error('IndexedDB API are not available in this browser.');\r\n            return;\r\n        }\r\n\r\n        var dbVersion = 1;\r\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\r\n            db;\r\n        var request = indexedDB.open(dbName, dbVersion);\r\n\r\n        function createObjectStore(dataBase) {\r\n            dataBase.createObjectStore(self.dataStoreName);\r\n        }\r\n\r\n        function putInDB() {\r\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\r\n\r\n            if (self.videoBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\r\n            }\r\n\r\n            if (self.gifBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\r\n            }\r\n\r\n            if (self.audioBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\r\n            }\r\n\r\n            function getFromStore(portionName) {\r\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function(event) {\r\n                    if (self.callback) {\r\n                        self.callback(event.target.result, portionName);\r\n                    }\r\n                };\r\n            }\r\n\r\n            getFromStore('audioBlob');\r\n            getFromStore('videoBlob');\r\n            getFromStore('gifBlob');\r\n        }\r\n\r\n        request.onerror = self.onError;\r\n\r\n        request.onsuccess = function() {\r\n            db = request.result;\r\n            db.onerror = self.onError;\r\n\r\n            if (db.setVersion) {\r\n                if (db.version !== dbVersion) {\r\n                    var setVersion = db.setVersion(dbVersion);\r\n                    setVersion.onsuccess = function() {\r\n                        createObjectStore(db);\r\n                        putInDB();\r\n                    };\r\n                } else {\r\n                    putInDB();\r\n                }\r\n            } else {\r\n                putInDB();\r\n            }\r\n        };\r\n        request.onupgradeneeded = function(event) {\r\n            createObjectStore(event.target.result);\r\n        };\r\n    },\r\n    /**\r\n     * This method fetches stored blobs from IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Fetch(function(dataURL, type) {\r\n     *     if(type === 'audioBlob') { }\r\n     *     if(type === 'videoBlob') { }\r\n     *     if(type === 'gifBlob')   { }\r\n     * });\r\n     */\r\n    Fetch: function(callback) {\r\n        this.callback = callback;\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This method stores blobs in IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Store({\r\n     *     audioBlob: yourAudioBlob,\r\n     *     videoBlob: yourVideoBlob,\r\n     *     gifBlob  : yourGifBlob\r\n     * });\r\n     */\r\n    Store: function(config) {\r\n        this.audioBlob = config.audioBlob;\r\n        this.videoBlob = config.videoBlob;\r\n        this.gifBlob = config.gifBlob;\r\n\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This function is invoked for any known/unknown error.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.onError = function(error){\r\n     *     alerot( JSON.stringify(error) );\r\n     * };\r\n     */\r\n    onError: function(error) {\r\n        console.error(JSON.stringify(error, null, '\\t'));\r\n    },\r\n\r\n    /**\r\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.dataStoreName = 'recordRTC';\r\n     */\r\n    dataStoreName: 'recordRTC',\r\n    dbName: null\r\n};\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.DiskStorage = DiskStorage;\r\n}\n\r\n// ______________\r\n// GifRecorder.js\r\n\r\n/**\r\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef GifRecorder\r\n * @class\r\n * @example\r\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     img.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\r\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\r\n */\r\n\r\nfunction GifRecorder(mediaStream, config) {\r\n    if (typeof GIFEncoder === 'undefined') {\r\n        var script = document.createElement('script');\r\n        script.src = 'https://cdn.webrtc-experiment.com/gif-recorder.js';\r\n        (document.body || document.documentElement).appendChild(script);\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (typeof GIFEncoder === 'undefined') {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isLoadedMetaData) {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isHTMLObject) {\r\n            if (!config.width) {\r\n                config.width = video.offsetWidth || 320;\r\n            }\r\n\r\n            if (!config.height) {\r\n                config.height = video.offsetHeight || 240;\r\n            }\r\n\r\n            if (!config.video) {\r\n                config.video = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            if (!config.canvas) {\r\n                config.canvas = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            canvas.width = config.canvas.width || 320;\r\n            canvas.height = config.canvas.height || 240;\r\n\r\n            video.width = config.video.width || 320;\r\n            video.height = config.video.height || 240;\r\n        }\r\n\r\n        // external library to record as GIF images\r\n        gifEncoder = new GIFEncoder();\r\n\r\n        // void setRepeat(int iter) \r\n        // Sets the number of times the set of GIF frames should be played. \r\n        // Default is 1; 0 means play indefinitely.\r\n        gifEncoder.setRepeat(0);\r\n\r\n        // void setFrameRate(Number fps) \r\n        // Sets frame rate in frames per second. \r\n        // Equivalent to setDelay(1000/fps).\r\n        // Using \"setDelay\" instead of \"setFrameRate\"\r\n        gifEncoder.setDelay(config.frameRate || 200);\r\n\r\n        // void setQuality(int quality) \r\n        // Sets quality of color quantization (conversion of images to the \r\n        // maximum 256 colors allowed by the GIF specification). \r\n        // Lower values (minimum = 1) produce better colors, \r\n        // but slow processing significantly. 10 is the default, \r\n        // and produces good color mapping at reasonable speeds. \r\n        // Values greater than 20 do not yield significant improvements in speed.\r\n        gifEncoder.setQuality(config.quality || 10);\r\n\r\n        // Boolean start() \r\n        // This writes the GIF Header and returns false if it fails.\r\n        gifEncoder.start();\r\n\r\n        if (typeof config.onGifRecordingStarted === 'function') {\r\n            config.onGifRecordingStarted();\r\n        }\r\n\r\n        startTime = Date.now();\r\n\r\n        function drawVideoFrame(time) {\r\n            if (self.clearedRecordedData === true) {\r\n                return;\r\n            }\r\n\r\n            if (isPausedRecording) {\r\n                return setTimeout(function() {\r\n                    drawVideoFrame(time);\r\n                }, 100);\r\n            }\r\n\r\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n            if (typeof lastFrameTime === undefined) {\r\n                lastFrameTime = time;\r\n            }\r\n\r\n            // ~10 fps\r\n            if (time - lastFrameTime < 90) {\r\n                return;\r\n            }\r\n\r\n            if (!isHTMLObject && video.paused) {\r\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n                // Tweak for Android Chrome\r\n                video.play();\r\n            }\r\n\r\n            if (!isHTMLObject) {\r\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            }\r\n\r\n            if (config.onGifPreview) {\r\n                config.onGifPreview(canvas.toDataURL('image/png'));\r\n            }\r\n\r\n            gifEncoder.addFrame(context);\r\n            lastFrameTime = time;\r\n        }\r\n\r\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     img.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (lastAnimationFrame) {\r\n            cancelAnimationFrame(lastAnimationFrame);\r\n        }\r\n\r\n        endTime = Date.now();\r\n\r\n        /**\r\n         * @property {Blob} blob - The recorded blob object.\r\n         * @memberof GifRecorder\r\n         * @example\r\n         * recorder.stop(function(){\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         */\r\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\r\n            type: 'image/gif'\r\n        });\r\n\r\n        callback(this.blob);\r\n\r\n        // bug: find a way to clear old recorded blobs\r\n        gifEncoder.stream().bin = [];\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        self.clearedRecordedData = true;\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        if (gifEncoder) {\r\n            gifEncoder.stream().bin = [];\r\n        }\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'GifRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    if (isHTMLObject) {\r\n        if (mediaStream instanceof CanvasRenderingContext2D) {\r\n            context = mediaStream;\r\n            canvas = context.canvas;\r\n        } else if (mediaStream instanceof HTMLCanvasElement) {\r\n            context = mediaStream.getContext('2d');\r\n            canvas = mediaStream;\r\n        }\r\n    }\r\n\r\n    var isLoadedMetaData = true;\r\n\r\n    if (!isHTMLObject) {\r\n        var video = document.createElement('video');\r\n        video.muted = true;\r\n        video.autoplay = true;\r\n\r\n        isLoadedMetaData = false;\r\n        video.onloadedmetadata = function() {\r\n            isLoadedMetaData = true;\r\n        };\r\n\r\n        setSrcObject(mediaStream, video);\r\n\r\n        video.play();\r\n    }\r\n\r\n    var lastAnimationFrame = null;\r\n    var startTime, endTime, lastFrameTime;\r\n\r\n    var gifEncoder;\r\n\r\n    var self = this;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.GifRecorder = GifRecorder;\r\n}\n\r\n// Last time updated: 2017-09-26 7:19:00 AM UTC\r\n\r\n// ________________________\r\n// MultiStreamsMixer v1.0.3\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\nfunction MultiStreamsMixer(arrayOfMediaStreams) {\r\n\r\n    // requires: chrome://flags/#enable-experimental-web-platform-features\r\n\r\n    var videos = [];\r\n    var isStopDrawingFrames = false;\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    canvas.style = 'opacity:0;position:absolute;z-index:-1;top: -100000000;left:-1000000000; margin-top:-1000000000;margin-left:-1000000000;';\r\n    (document.body || document.documentElement).appendChild(canvas);\r\n\r\n    this.disableLogs = false;\r\n    this.frameInterval = 10;\r\n\r\n    this.width = 360;\r\n    this.height = 240;\r\n\r\n    // use gain node to prevent echo\r\n    this.useGainNode = true;\r\n\r\n    var self = this;\r\n\r\n    // _____________________________\r\n    // Cross-Browser-Declarations.js\r\n\r\n    // WebAudio API representer\r\n    var AudioContext = window.AudioContext;\r\n\r\n    if (typeof AudioContext === 'undefined') {\r\n        if (typeof webkitAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = webkitAudioContext;\r\n        }\r\n\r\n        if (typeof mozAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = mozAudioContext;\r\n        }\r\n    }\r\n\r\n    /*jshint -W079 */\r\n    var URL = window.URL;\r\n\r\n    if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n        /*global URL:true */\r\n        URL = webkitURL;\r\n    }\r\n\r\n    if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n        if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n        }\r\n\r\n        if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.mozGetUserMedia;\r\n        }\r\n    }\r\n\r\n    var MediaStream = window.MediaStream;\r\n\r\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n        MediaStream = webkitMediaStream;\r\n    }\r\n\r\n    /*global MediaStream:true */\r\n    if (typeof MediaStream !== 'undefined') {\r\n        if (!('getVideoTracks' in MediaStream.prototype)) {\r\n            MediaStream.prototype.getVideoTracks = function() {\r\n                if (!this.getTracks) {\r\n                    return [];\r\n                }\r\n\r\n                var tracks = [];\r\n                this.getTracks.forEach(function(track) {\r\n                    if (track.kind.toString().indexOf('video') !== -1) {\r\n                        tracks.push(track);\r\n                    }\r\n                });\r\n                return tracks;\r\n            };\r\n\r\n            MediaStream.prototype.getAudioTracks = function() {\r\n                if (!this.getTracks) {\r\n                    return [];\r\n                }\r\n\r\n                var tracks = [];\r\n                this.getTracks.forEach(function(track) {\r\n                    if (track.kind.toString().indexOf('audio') !== -1) {\r\n                        tracks.push(track);\r\n                    }\r\n                });\r\n                return tracks;\r\n            };\r\n        }\r\n\r\n        // override \"stop\" method for all browsers\r\n        if (typeof MediaStream.prototype.stop === 'undefined') {\r\n            MediaStream.prototype.stop = function() {\r\n                this.getTracks().forEach(function(track) {\r\n                    track.stop();\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    var Storage = {};\r\n\r\n    if (typeof AudioContext !== 'undefined') {\r\n        Storage.AudioContext = AudioContext;\r\n    } else if (typeof webkitAudioContext !== 'undefined') {\r\n        Storage.AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    function setSrcObject(stream, element, ignoreCreateObjectURL) {\r\n        if ('createObjectURL' in URL && !ignoreCreateObjectURL) {\r\n            try {\r\n                element.src = URL.createObjectURL(stream);\r\n            } catch (e) {\r\n                setSrcObject(stream, element, true);\r\n                return;\r\n            }\r\n        } else if ('srcObject' in element) {\r\n            element.srcObject = stream;\r\n        } else if ('mozSrcObject' in element) {\r\n            element.mozSrcObject = stream;\r\n        } else {\r\n            alert('createObjectURL/srcObject both are not supported.');\r\n        }\r\n    }\r\n\r\n    this.startDrawingFrames = function() {\r\n        drawVideosToCanvas();\r\n    };\r\n\r\n    function drawVideosToCanvas() {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var videosLength = videos.length;\r\n\r\n        var fullcanvas = false;\r\n        var remaining = [];\r\n        videos.forEach(function(video) {\r\n            if (!video.stream) {\r\n                video.stream = {};\r\n            }\r\n\r\n            if (video.stream.fullcanvas) {\r\n                fullcanvas = video;\r\n            } else {\r\n                remaining.push(video);\r\n            }\r\n        });\r\n\r\n        if (fullcanvas) {\r\n            canvas.width = fullcanvas.stream.width;\r\n            canvas.height = fullcanvas.stream.height;\r\n        } else if (remaining.length) {\r\n            canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\r\n\r\n            var height = 1;\r\n            if (videosLength === 3 || videosLength === 4) {\r\n                height = 2;\r\n            }\r\n            if (videosLength === 5 || videosLength === 6) {\r\n                height = 3;\r\n            }\r\n            if (videosLength === 7 || videosLength === 8) {\r\n                height = 4;\r\n            }\r\n            if (videosLength === 9 || videosLength === 10) {\r\n                height = 5;\r\n            }\r\n            canvas.height = remaining[0].height * height;\r\n        } else {\r\n            canvas.width = self.width || 360;\r\n            canvas.height = self.height || 240;\r\n        }\r\n\r\n        if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\r\n            drawImage(fullcanvas);\r\n        }\r\n\r\n        remaining.forEach(function(video, idx) {\r\n            drawImage(video, idx);\r\n        });\r\n\r\n        setTimeout(drawVideosToCanvas, self.frameInterval);\r\n    }\r\n\r\n    function drawImage(video, idx) {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var x = 0;\r\n        var y = 0;\r\n        var width = video.width;\r\n        var height = video.height;\r\n\r\n        if (idx === 1) {\r\n            x = video.width;\r\n        }\r\n\r\n        if (idx === 2) {\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 3) {\r\n            x = video.width;\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 4) {\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 5) {\r\n            x = video.width;\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 6) {\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (idx === 7) {\r\n            x = video.width;\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (typeof video.stream.left !== 'undefined') {\r\n            x = video.stream.left;\r\n        }\r\n\r\n        if (typeof video.stream.top !== 'undefined') {\r\n            y = video.stream.top;\r\n        }\r\n\r\n        if (typeof video.stream.width !== 'undefined') {\r\n            width = video.stream.width;\r\n        }\r\n\r\n        if (typeof video.stream.height !== 'undefined') {\r\n            height = video.stream.height;\r\n        }\r\n\r\n        context.drawImage(video, x, y, width, height);\r\n\r\n        if (typeof video.stream.onRender === 'function') {\r\n            video.stream.onRender(context, x, y, width, height, idx);\r\n        }\r\n    }\r\n\r\n    function getMixedStream() {\r\n        isStopDrawingFrames = false;\r\n        var mixedVideoStream = getMixedVideoStream();\r\n\r\n        var mixedAudioStream = getMixedAudioStream();\r\n        if (mixedAudioStream) {\r\n            mixedAudioStream.getAudioTracks().forEach(function(track) {\r\n                mixedVideoStream.addTrack(track);\r\n            });\r\n        }\r\n\r\n        var fullcanvas;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (stream.fullcanvas) {\r\n                fullcanvas = true;\r\n            }\r\n        });\r\n\r\n        return mixedVideoStream;\r\n    }\r\n\r\n    function getMixedVideoStream() {\r\n        resetVideoStreams();\r\n\r\n        var capturedStream;\r\n\r\n        if ('captureStream' in canvas) {\r\n            capturedStream = canvas.captureStream();\r\n        } else if ('mozCaptureStream' in canvas) {\r\n            capturedStream = canvas.mozCaptureStream();\r\n        } else if (!self.disableLogs) {\r\n            console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\r\n        }\r\n\r\n        var videoStream = new MediaStream();\r\n\r\n        capturedStream.getVideoTracks().forEach(function(track) {\r\n            videoStream.addTrack(track);\r\n        });\r\n\r\n        canvas.stream = videoStream;\r\n\r\n        return videoStream;\r\n    }\r\n\r\n    function getMixedAudioStream() {\r\n        // via: @pehrsons\r\n        if (!Storage.AudioContextConstructor) {\r\n            Storage.AudioContextConstructor = new Storage.AudioContext();\r\n        }\r\n\r\n        self.audioContext = Storage.AudioContextConstructor;\r\n\r\n        self.audioSources = [];\r\n\r\n        if (self.useGainNode === true) {\r\n            self.gainNode = self.audioContext.createGain();\r\n            self.gainNode.connect(self.audioContext.destination);\r\n            self.gainNode.gain.value = 0; // don't hear self\r\n        }\r\n\r\n        var audioTracksLength = 0;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (!stream.getAudioTracks().length) {\r\n                return;\r\n            }\r\n\r\n            audioTracksLength++;\r\n\r\n            var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n\r\n            if (self.useGainNode === true) {\r\n                audioSource.connect(self.gainNode);\r\n            }\r\n\r\n            self.audioSources.push(audioSource);\r\n        });\r\n\r\n        if (!audioTracksLength) {\r\n            return;\r\n        }\r\n\r\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n        self.audioSources.forEach(function(audioSource) {\r\n            audioSource.connect(self.audioDestination);\r\n        });\r\n        return self.audioDestination.stream;\r\n    }\r\n\r\n    function getVideo(stream) {\r\n        var video = document.createElement('video');\r\n\r\n        setSrcObject(stream, video);\r\n\r\n        video.muted = true;\r\n        video.volume = 0;\r\n\r\n        video.width = stream.width || self.width || 360;\r\n        video.height = stream.height || self.height || 240;\r\n\r\n        video.play();\r\n\r\n        return video;\r\n    }\r\n\r\n    this.appendStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        arrayOfMediaStreams.concat(streams);\r\n\r\n        streams.forEach(function(stream) {\r\n            if (stream.getVideoTracks().length) {\r\n                var video = getVideo(stream);\r\n                video.stream = stream;\r\n                videos.push(video);\r\n            }\r\n\r\n            if (stream.getAudioTracks().length && self.audioContext) {\r\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n                audioSource.connect(self.audioDestination);\r\n                self.audioSources.push(audioSource);\r\n            }\r\n        });\r\n    };\r\n\r\n    this.releaseStreams = function() {\r\n        videos = [];\r\n        isStopDrawingFrames = true;\r\n\r\n        if (self.gainNode) {\r\n            self.gainNode.disconnect();\r\n            self.gainNode = null;\r\n        }\r\n\r\n        if (self.audioSources.length) {\r\n            self.audioSources.forEach(function(source) {\r\n                source.disconnect();\r\n            });\r\n            self.audioSources = [];\r\n        }\r\n\r\n        if (self.audioDestination) {\r\n            self.audioDestination.disconnect();\r\n            self.audioDestination = null;\r\n        }\r\n\r\n        self.audioContext = null;\r\n\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (canvas.stream) {\r\n            canvas.stream.stop();\r\n            canvas.stream = null;\r\n        }\r\n    };\r\n\r\n    this.resetVideoStreams = function(streams) {\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        resetVideoStreams(streams);\r\n    };\r\n\r\n    function resetVideoStreams(streams) {\r\n        videos = [];\r\n        streams = streams || arrayOfMediaStreams;\r\n\r\n        // via: @adrian-ber\r\n        streams.forEach(function(stream) {\r\n            if (!stream.getVideoTracks().length) {\r\n                return;\r\n            }\r\n\r\n            var video = getVideo(stream);\r\n            video.stream = stream;\r\n            videos.push(video);\r\n        });\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamsMixer';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    this.getMixedStream = getMixedStream;\r\n\r\n}\n\r\n// ______________________\r\n// MultiStreamRecorder.js\r\n\r\n/*\r\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\r\n */\r\n\r\n/**\r\n * MultiStreamRecorder can record multiple videos in single container.\r\n * @summary Multi-videos recorder.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef MultiStreamRecorder\r\n * @class\r\n * @example\r\n * var options = {\r\n *     mimeType: 'video/webm'\r\n * }\r\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\r\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\r\n */\r\n\r\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\r\n    arrayOfMediaStreams = arrayOfMediaStreams || [];\r\n    var self = this;\r\n\r\n    var mixer;\r\n    var mediaRecorder;\r\n\r\n    options = options || {\r\n        mimeType: 'video/webm',\r\n        video: {\r\n            width: 360,\r\n            height: 240\r\n        }\r\n    };\r\n\r\n    if (!options.frameInterval) {\r\n        options.frameInterval = 10;\r\n    }\r\n\r\n    if (!options.video) {\r\n        options.video = {};\r\n    }\r\n\r\n    if (!options.video.width) {\r\n        options.video.width = 360;\r\n    }\r\n\r\n    if (!options.video.height) {\r\n        options.video.height = 240;\r\n    }\r\n\r\n    /**\r\n     * This method records all MediaStreams.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // github/muaz-khan/MultiStreamsMixer\r\n        mixer = new MultiStreamsMixer(arrayOfMediaStreams);\r\n\r\n        if (getVideoTracks().length) {\r\n            mixer.frameInterval = options.frameInterval || 10;\r\n            mixer.width = options.video.width || 360;\r\n            mixer.height = options.video.height || 240;\r\n            mixer.startDrawingFrames();\r\n        }\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n\r\n        // record using MediaRecorder API\r\n        mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\r\n        mediaRecorder.record();\r\n    };\r\n\r\n    function getVideoTracks() {\r\n        var tracks = [];\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            stream.getVideoTracks().forEach(function(track) {\r\n                tracks.push(track);\r\n            });\r\n        });\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        mediaRecorder.stop(function(blob) {\r\n            self.blob = blob;\r\n\r\n            callback(blob);\r\n\r\n            self.clearRecordedData();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (mixer) {\r\n            mixer.releaseStreams();\r\n            mixer = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add extra media-streams to existing recordings.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.addStreams([newAudioStream, newVideoStream]);\r\n     */\r\n    this.addStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        arrayOfMediaStreams.concat(streams);\r\n\r\n        if (!mediaRecorder || !mixer) {\r\n            return;\r\n        }\r\n\r\n        mixer.appendStreams(streams);\r\n    };\r\n\r\n    /**\r\n     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.resetVideoStreams([newVideo1, newVideo2]);\r\n     */\r\n    this.resetVideoStreams = function(streams) {\r\n        if (!mixer) {\r\n            return;\r\n        }\r\n\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        mixer.resetVideoStreams(streams);\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\r\n}\n\r\n// _____________________\r\n// RecordRTC.promises.js\r\n\r\n/**\r\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\r\n * @summary Promises for {@link RecordRTC}\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCPromisesHandler\r\n * @class\r\n * @example\r\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\n * recorder.startRecording()\r\n *         .then(successCB)\r\n *         .catch(errorCB);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction RecordRTCPromisesHandler(mediaStream, options) {\r\n    if (!this) {\r\n        throw 'Use \"new RecordRTCPromisesHandler()\"';\r\n    }\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    var self = this;\r\n\r\n    /**\r\n     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * var internal = recorder.recordRTC.getInternalRecorder();\r\n     * alert(internal instanceof MediaStreamRecorder);\r\n     */\r\n    self.recordRTC = new RecordRTC(mediaStream, options);\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.startRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.startRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.startRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method stops the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.stopRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.stopRecording(function(url) {\r\n                    self.blob = self.recordRTC.getBlob();\r\n                    resolve(url);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns data-url for the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getDataURL().then(function(dataURL) {\r\n     *         window.open(dataURL);\r\n     *     }).catch(errorCB);;\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.getDataURL(function(dataURL) {\r\n                    resolve(dataURL);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getBlob = function() {\r\n        return self.recordRTC.getBlob();\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.blob = null;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\r\n}\n","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n"],"sourceRoot":""}